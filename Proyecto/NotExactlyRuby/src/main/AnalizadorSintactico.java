
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.util.*;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\010\000\002\003" +
    "\006\000\002\030\004\000\002\030\004\000\002\030\002" +
    "\000\002\041\004\000\002\041\002\000\002\023\007\000" +
    "\002\023\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\006\000\002\042\007" +
    "\000\002\042\004\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\006\000\002\042" +
    "\004\000\002\037\006\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\025\012\000" +
    "\002\017\006\000\002\020\013\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\021\005\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\002" +
    "\000\002\036\011\000\002\033\004\000\002\033\004\000" +
    "\002\033\003\000\002\004\003\000\002\004\003\000\002" +
    "\024\005\000\002\024\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\040\003\000\002\040\003" +
    "\000\002\007\007\000\002\031\005\000\002\031\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\010\000\002\022\010\000\002\022\006\000\002\022" +
    "\002\000\002\026\011\000\002\027\011\000\002\027\007" +
    "\000\002\012\003\000\002\012\005\000\002\012\004\000" +
    "\002\013\003\000\002\013\004\000\002\013\005\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\006\000\002\015\003\000\002\015\005\000\002\015\004" +
    "\000\002\016\003\000\002\034\003\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\053\005\001\002\000\004\002\310\001" +
    "\002\000\004\011\006\001\002\000\004\012\007\001\002" +
    "\000\004\015\010\001\002\000\026\010\021\016\ufffc\031" +
    "\020\032\013\033\014\036\026\041\015\042\011\045\017" +
    "\047\027\001\002\000\004\011\301\001\002\000\032\010" +
    "\ufff5\014\ufff5\016\ufff5\031\ufff5\032\ufff5\033\ufff5\036\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\045\ufff5\047\ufff5\001\002\000" +
    "\022\004\061\005\056\006\060\010\070\011\064\017\062" +
    "\024\066\054\072\001\002\000\004\013\266\001\002\000" +
    "\004\011\257\001\002\000\032\010\ufff2\014\ufff2\016\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\036\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\045\ufff2\047\ufff2\001\002\000\004\011\233\001\002" +
    "\000\022\004\061\005\056\006\060\010\070\011\064\017" +
    "\062\024\066\054\072\001\002\000\006\011\120\020\211" +
    "\001\002\000\032\010\ufff3\014\ufff3\016\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\036\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3" +
    "\047\ufff3\001\002\000\004\016\210\001\002\000\032\010" +
    "\ufff7\014\ufff7\016\ufff7\031\ufff7\032\ufff7\033\ufff7\036\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\045\ufff7\047\ufff7\001\002\000" +
    "\004\021\207\001\002\000\010\046\042\050\037\055\041" +
    "\001\002\000\010\046\042\050\037\055\041\001\002\000" +
    "\032\010\021\014\ufffc\016\ufffc\031\020\032\013\033\014" +
    "\036\026\041\015\042\011\043\ufffc\045\017\047\027\001" +
    "\002\000\032\010\ufff6\014\ufff6\016\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\036\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6\047" +
    "\ufff6\001\002\000\032\010\ufff1\014\ufff1\016\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\036\ufff1\041\ufff1\042\ufff1\043\ufff1\045" +
    "\ufff1\047\ufff1\001\002\000\032\010\ufff4\014\ufff4\016\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\036\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\ufff4\047\ufff4\001\002\000\032\010\021\014\ufffc" +
    "\016\ufffc\031\020\032\013\033\014\036\026\041\015\042" +
    "\011\043\ufffc\045\017\047\027\001\002\000\010\014\ufffe" +
    "\016\ufffe\043\ufffe\001\002\000\010\014\ufffd\016\ufffd\043" +
    "\ufffd\001\002\000\010\010\uffcb\012\uffcb\022\uffcb\001\002" +
    "\000\006\010\044\022\043\001\002\000\010\010\uffca\012" +
    "\uffca\022\uffca\001\002\000\010\010\uffcc\012\uffcc\022\uffcc" +
    "\001\002\000\006\010\050\022\043\001\002\000\012\010" +
    "\050\020\051\021\052\022\043\001\002\000\004\021\047" +
    "\001\002\000\004\021\uffd1\001\002\000\034\010\uffff\014" +
    "\uffff\016\uffff\031\uffff\032\uffff\033\uffff\036\uffff\041\uffff" +
    "\042\uffff\043\uffff\045\uffff\047\uffff\051\uffff\001\002\000" +
    "\006\010\050\022\043\001\002\000\024\004\061\005\056" +
    "\006\060\007\057\010\070\011\064\017\062\024\066\054" +
    "\072\001\002\000\034\010\uffd0\014\uffd0\016\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\036\uffd0\041\uffd0\042\uffd0\043\uffd0\045" +
    "\uffd0\047\uffd0\051\uffd0\001\002\000\004\021\uffd3\001\002" +
    "\000\034\010\uffde\014\uffde\016\uffde\031\uffde\032\uffde\033" +
    "\uffde\036\uffde\041\uffde\042\uffde\043\uffde\045\uffde\047\uffde" +
    "\051\uffde\001\002\000\034\010\uffcf\014\uffcf\016\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\036\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\047\uffcf\051\uffcf\001\002\000\036\004\uffc3\005" +
    "\uffc3\006\uffc3\010\uffc3\012\uffc3\015\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\046\uffc3\050\uffc3\055\uffc3\001" +
    "\002\000\004\021\134\001\002\000\036\004\uffc2\005\uffc2" +
    "\006\uffc2\010\uffc2\012\uffc2\015\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\046\uffc2\050\uffc2\055\uffc2\001\002" +
    "\000\036\004\uffc4\005\uffc4\006\uffc4\010\uffc4\012\uffc4\015" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\046\uffc4" +
    "\050\uffc4\055\uffc4\001\002\000\004\010\116\001\002\000" +
    "\020\012\uffb7\015\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\076\001\002\000\022\004\061\005\056\006\060\010" +
    "\070\011\064\017\062\024\066\054\072\001\002\000\016" +
    "\012\uffba\015\uffba\021\uffba\022\uffba\023\110\024\111\001" +
    "\002\000\016\004\uffad\005\uffad\006\uffad\010\uffad\011\uffad" +
    "\054\uffad\001\002\000\004\021\107\001\002\000\022\011" +
    "\101\012\uffb2\015\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\001\002\000\020\012\uffb4\015\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\001\002\000\016\004\061" +
    "\005\056\006\060\010\070\011\064\054\072\001\002\000" +
    "\020\012\uffb0\015\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\001\002\000\016\004\061\005\056\006\060\010" +
    "\070\011\064\054\072\001\002\000\020\012\uffb6\015\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\076\001\002\000" +
    "\016\004\061\005\056\006\060\010\070\011\064\054\072" +
    "\001\002\000\020\012\uffb3\015\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\001\002\000\020\012\uffae\015\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\001\002\000" +
    "\022\004\061\005\056\006\060\010\070\011\064\017\062" +
    "\024\066\054\072\001\002\000\006\012\uffac\022\uffac\001" +
    "\002\000\006\012\105\022\104\001\002\000\022\004\061" +
    "\005\056\006\060\010\070\011\064\017\062\024\066\054" +
    "\072\001\002\000\020\012\uffb1\015\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\001\002\000\006\012\uffab\022" +
    "\uffab\001\002\000\034\010\uffce\014\uffce\016\uffce\031\uffce" +
    "\032\uffce\033\uffce\036\uffce\041\uffce\042\uffce\043\uffce\045" +
    "\uffce\047\uffce\051\uffce\001\002\000\020\004\061\005\056" +
    "\006\060\010\070\011\064\024\066\054\072\001\002\000" +
    "\016\004\061\005\056\006\060\010\070\011\064\054\072" +
    "\001\002\000\020\012\uffb5\015\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\076\001\002\000\014\012\uffb9\015\uffb9" +
    "\021\uffb9\022\uffb9\024\111\001\002\000\004\012\115\001" +
    "\002\000\020\012\uffaf\015\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\001\002\000\004\011\120\001\002\000" +
    "\012\012\uffb8\015\uffb8\021\uffb8\022\uffb8\001\002\000\024" +
    "\004\061\005\056\006\060\010\122\012\uffd5\022\123\046" +
    "\042\050\037\055\041\001\002\000\004\012\133\001\002" +
    "\000\024\004\061\005\056\006\060\010\122\012\uffd5\022" +
    "\123\046\042\050\037\055\041\001\002\000\024\004\061" +
    "\005\056\006\060\010\122\012\uffd5\022\123\046\042\050" +
    "\037\055\041\001\002\000\004\010\127\001\002\000\024" +
    "\004\061\005\056\006\060\010\122\012\uffd5\022\123\046" +
    "\042\050\037\055\041\001\002\000\004\012\uffd7\001\002" +
    "\000\024\004\061\005\056\006\060\010\122\012\uffd5\022" +
    "\123\046\042\050\037\055\041\001\002\000\004\012\uffd9" +
    "\001\002\000\004\012\uffd6\001\002\000\004\012\uffd8\001" +
    "\002\000\012\012\uffe4\015\uffe4\021\uffe4\022\uffe4\001\002" +
    "\000\034\010\uffcd\014\uffcd\016\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\036\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\047\uffcd" +
    "\051\uffcd\001\002\000\004\021\uffd2\001\002\000\004\010" +
    "\137\001\002\000\004\011\140\001\002\000\024\004\061" +
    "\005\056\006\060\010\122\012\uffd5\022\123\046\042\050" +
    "\037\055\041\001\002\000\004\012\142\001\002\000\004" +
    "\015\143\001\002\000\026\010\150\016\ufffa\031\020\032" +
    "\146\033\014\041\015\042\011\045\017\047\027\051\153" +
    "\001\002\000\004\016\206\001\002\000\026\010\uffeb\016" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\041\uffeb\042\uffeb\045\uffeb" +
    "\047\uffeb\051\uffeb\001\002\000\022\004\061\005\056\006" +
    "\060\010\070\011\064\017\062\024\066\054\072\001\002" +
    "\000\026\010\uffe8\016\uffe8\031\uffe8\032\uffe8\033\uffe8\041" +
    "\uffe8\042\uffe8\045\uffe8\047\uffe8\051\uffe8\001\002\000\006" +
    "\011\120\020\172\001\002\000\026\010\uffe9\016\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\041\uffe9\042\uffe9\045\uffe9\047\uffe9" +
    "\051\uffe9\001\002\000\026\010\uffed\016\uffed\031\uffed\032" +
    "\uffed\033\uffed\041\uffed\042\uffed\045\uffed\047\uffed\051\uffed" +
    "\001\002\000\012\004\061\005\056\006\060\010\163\001" +
    "\002\000\004\021\162\001\002\000\026\010\uffec\016\uffec" +
    "\031\uffec\032\uffec\033\uffec\041\uffec\042\uffec\045\uffec\047" +
    "\uffec\051\uffec\001\002\000\026\010\150\016\ufffa\031\020" +
    "\032\146\033\014\041\015\042\011\045\017\047\027\051" +
    "\153\001\002\000\026\010\uffe7\016\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\041\uffe7\042\uffe7\045\uffe7\047\uffe7\051\uffe7\001" +
    "\002\000\026\010\uffea\016\uffea\031\uffea\032\uffea\033\uffea" +
    "\041\uffea\042\uffea\045\uffea\047\uffea\051\uffea\001\002\000" +
    "\004\016\ufffb\001\002\000\026\010\uffee\016\uffee\031\uffee" +
    "\032\uffee\033\uffee\041\uffee\042\uffee\045\uffee\047\uffee\051" +
    "\uffee\001\002\000\006\011\120\021\171\001\002\000\004" +
    "\021\170\001\002\000\026\010\uffe5\016\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\041\uffe5\042\uffe5\045\uffe5\047\uffe5\051\uffe5" +
    "\001\002\000\004\021\167\001\002\000\026\010\uffdb\016" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\041\uffdb\042\uffdb\045\uffdb" +
    "\047\uffdb\051\uffdb\001\002\000\026\010\uffdc\016\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\041\uffdc\042\uffdc\045\uffdc\047\uffdc" +
    "\051\uffdc\001\002\000\026\010\uffda\016\uffda\031\uffda\032" +
    "\uffda\033\uffda\041\uffda\042\uffda\045\uffda\047\uffda\051\uffda" +
    "\001\002\000\024\004\061\005\056\006\060\010\070\011" +
    "\064\017\062\024\066\040\174\054\072\001\002\000\004" +
    "\021\201\001\002\000\004\011\175\001\002\000\010\046" +
    "\042\050\037\055\041\001\002\000\004\012\177\001\002" +
    "\000\004\021\200\001\002\000\034\010\uffd4\014\uffd4\016" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\045\uffd4\047\uffd4\051\uffd4\001\002\000\026\010" +
    "\uffe6\016\uffe6\031\uffe6\032\uffe6\033\uffe6\041\uffe6\042\uffe6" +
    "\045\uffe6\047\uffe6\051\uffe6\001\002\000\004\015\203\001" +
    "\002\000\026\010\021\016\ufffc\031\020\032\013\033\014" +
    "\036\026\041\015\042\011\045\017\047\027\001\002\000" +
    "\004\016\205\001\002\000\026\010\uffef\016\uffef\031\uffef" +
    "\032\uffef\033\uffef\041\uffef\042\uffef\045\uffef\047\uffef\051" +
    "\uffef\001\002\000\032\010\uffdd\014\uffdd\016\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\036\uffdd\041\uffdd\042\uffdd\043\uffdd\045" +
    "\uffdd\047\uffdd\001\002\000\032\010\ufff8\014\ufff8\016\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\036\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\045\ufff8\047\ufff8\001\002\000\004\002\000\001\002" +
    "\000\024\004\061\005\056\006\060\010\070\011\064\017" +
    "\062\024\066\040\174\054\072\001\002\000\004\021\213" +
    "\001\002\000\032\010\ufff0\014\ufff0\016\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\036\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0" +
    "\047\ufff0\001\002\000\004\015\215\001\002\000\026\010" +
    "\021\016\ufffc\031\020\032\013\033\014\036\026\041\015" +
    "\042\011\045\017\047\027\001\002\000\004\016\217\001" +
    "\002\000\040\010\uffbe\014\uffbe\016\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\222\035\220\036\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\045\uffbe\047\uffbe\051\uffbe\001\002\000\004\015\230" +
    "\001\002\000\034\010\uffc1\014\uffc1\016\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\036\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1" +
    "\047\uffc1\051\uffc1\001\002\000\022\004\061\005\056\006" +
    "\060\010\070\011\064\017\062\024\066\054\072\001\002" +
    "\000\004\015\224\001\002\000\026\010\021\016\ufffc\031" +
    "\020\032\013\033\014\036\026\041\015\042\011\045\017" +
    "\047\027\001\002\000\004\016\226\001\002\000\040\010" +
    "\uffbe\014\uffbe\016\uffbe\031\uffbe\032\uffbe\033\uffbe\034\222" +
    "\035\220\036\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\047" +
    "\uffbe\051\uffbe\001\002\000\034\010\uffc0\014\uffc0\016\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\036\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\045\uffc0\047\uffc0\051\uffc0\001\002\000\026\010\021" +
    "\016\ufffc\031\020\032\013\033\014\036\026\041\015\042" +
    "\011\045\017\047\027\001\002\000\004\016\232\001\002" +
    "\000\034\010\uffbf\014\uffbf\016\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\036\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\047\uffbf" +
    "\051\uffbf\001\002\000\004\010\234\001\002\000\004\012" +
    "\235\001\002\000\004\015\236\001\002\000\006\030\241" +
    "\044\237\001\002\000\004\017\253\001\002\000\004\016" +
    "\252\001\002\000\006\005\244\006\243\001\002\000\004" +
    "\017\245\001\002\000\004\017\uffc8\001\002\000\004\017" +
    "\uffc9\001\002\000\026\010\021\031\020\032\013\033\014" +
    "\036\026\041\015\042\011\043\ufffc\045\017\047\027\001" +
    "\002\000\004\043\247\001\002\000\004\021\250\001\002" +
    "\000\006\030\241\044\237\001\002\000\004\016\uffbc\001" +
    "\002\000\034\010\uffbd\014\uffbd\016\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\036\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd\047" +
    "\uffbd\051\uffbd\001\002\000\026\010\021\031\020\032\013" +
    "\033\014\036\026\041\015\042\011\043\ufffc\045\017\047" +
    "\027\001\002\000\004\043\255\001\002\000\004\021\256" +
    "\001\002\000\004\016\uffbb\001\002\000\012\004\061\005" +
    "\056\006\060\010\260\001\002\000\004\012\264\001\002" +
    "\000\004\012\262\001\002\000\004\021\263\001\002\000" +
    "\034\010\uffe1\014\uffe1\016\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\036\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1\047\uffe1\051" +
    "\uffe1\001\002\000\004\021\265\001\002\000\034\010\uffe3" +
    "\014\uffe3\016\uffe3\031\uffe3\032\uffe3\033\uffe3\036\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\045\uffe3\047\uffe3\051\uffe3\001\002" +
    "\000\026\010\021\014\ufffc\031\020\032\013\033\014\036" +
    "\026\041\015\042\011\045\017\047\027\001\002\000\004" +
    "\014\270\001\002\000\004\052\271\001\002\000\004\011" +
    "\272\001\002\000\004\010\273\001\002\000\004\012\274" +
    "\001\002\000\034\010\uffdf\014\uffdf\016\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\036\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf" +
    "\047\uffdf\051\uffdf\001\002\000\004\015\276\001\002\000" +
    "\026\010\021\016\ufffc\031\020\032\013\033\014\036\026" +
    "\041\015\042\011\045\017\047\027\001\002\000\004\016" +
    "\300\001\002\000\032\010\ufff9\014\ufff9\016\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\036\ufff9\041\ufff9\042\ufff9\043\ufff9\045" +
    "\ufff9\047\ufff9\001\002\000\012\004\061\005\056\006\060" +
    "\010\302\001\002\000\004\012\306\001\002\000\004\012" +
    "\304\001\002\000\004\021\305\001\002\000\034\010\uffe0" +
    "\014\uffe0\016\uffe0\031\uffe0\032\uffe0\033\uffe0\036\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\045\uffe0\047\uffe0\051\uffe0\001\002" +
    "\000\004\021\307\001\002\000\034\010\uffe2\014\uffe2\016" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\036\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\045\uffe2\047\uffe2\051\uffe2\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\032\011\030\017\021\020\027\023\033\025\023\026" +
    "\011\030\022\035\015\036\031\037\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\072\012\274\013" +
    "\064\014\062\015\070\016\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\072\012\213\013\064\014\062\015\070\016\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\135" +
    "\001\001\000\004\006\037\001\001\000\030\003\032\011" +
    "\030\017\021\020\027\023\033\025\023\026\011\030\035" +
    "\035\015\036\031\037\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\032\011\030" +
    "\017\021\020\027\023\033\025\023\026\011\030\034\035" +
    "\015\036\031\037\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\045\033\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\045" +
    "\033\134\001\001\000\012\004\053\024\054\032\045\033" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\045\033\052\001\001\000\016\010" +
    "\072\012\066\013\064\014\062\015\070\016\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\116\001\001\000" +
    "\002\001\001\000\016\010\072\012\113\013\064\014\062" +
    "\015\070\016\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\072\015\077\001\001\000\002\001\001\000" +
    "\010\010\072\014\074\015\070\001\001\000\002\001\001" +
    "\000\006\010\072\015\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\072\012\101\013\064\014\062" +
    "\015\070\016\073\034\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\072\012\105\013\064\014\062" +
    "\015\070\016\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\072\013\112\014\062" +
    "\015\070\016\073\001\001\000\010\010\072\014\111\015" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\123\010\124\021\120\001\001\000\002" +
    "\001\001\000\010\006\123\010\124\021\131\001\001\000" +
    "\010\006\123\010\124\021\130\001\001\000\002\001\001" +
    "\000\010\006\123\010\124\021\125\001\001\000\002\001" +
    "\001\000\010\006\123\010\124\021\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\123\010\124\021\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\157" +
    "\011\154\017\150\025\151\026\144\035\146\036\156\037" +
    "\153\041\143\042\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\072\012\201\013\064\014\062\015" +
    "\070\016\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\163\037" +
    "\165\043\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\157\011\154\017\150\025\151\026\144\035" +
    "\146\036\156\037\153\041\160\042\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\072\012\172\013\064\014\062" +
    "\015\070\016\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\032\011\030\017\021\020\027\023\033" +
    "\025\023\026\011\030\203\035\015\036\031\037\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\072\012" +
    "\211\013\064\014\062\015\070\016\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\032\011\030\017\021\020\027\023\033\025\023\026\011" +
    "\030\215\035\015\036\031\037\024\001\001\000\002\001" +
    "\001\000\004\022\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\072\012\222\013\064\014\062\015" +
    "\070\016\073\001\001\000\002\001\001\000\030\003\032" +
    "\011\030\017\021\020\027\023\033\025\023\026\011\030" +
    "\224\035\015\036\031\037\024\001\001\000\002\001\001" +
    "\000\004\022\226\001\001\000\002\001\001\000\030\003" +
    "\032\011\030\017\021\020\027\023\033\025\023\026\011" +
    "\030\230\035\015\036\031\037\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\032\011\030\017\021\020\027\023\033\025\023\026\011" +
    "\030\245\035\015\036\031\037\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\032\011\030\017" +
    "\021\020\027\023\033\025\023\026\011\030\253\035\015" +
    "\036\031\037\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\032" +
    "\011\030\017\021\020\027\023\033\025\023\026\011\030" +
    "\266\035\015\036\031\037\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\032\011\030\017\021\020\027\023\033\025\023\026" +
    "\011\030\276\035\015\036\031\037\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public int count=1;
        public static Nodo padre;
        public static int syntacticErrors = 0;

        public String token_name_from_id(int id){
                //por medio de SYM.JAVA
                switch(id){
                case 0: return "EOF";
                case 1: return "error";
                case 2: return "BOOL";
                case 3: return "LETTERS";
                case 4: return "INTEGER";
                case 5: return "NOTHING";
                case 6: return "ID";
                case 7: return "LPAR";
                case 8: return "RPAR";
                case 9: return "LSBRACKET";
                case 10: return "RSBRACKET";
                case 11: return "LCBRACKET";
                case 12: return "RCBRACKET";
                case 13: return "COLON";
                case 14: return "ASSIGNMENT";
                case 15: return "SEMICOLON";
                case 16: return "COMMA";
                case 17: return "OPREL";
                case 18: return "OPSUMA";
                case 19: return "OPMULT";
                case 20: return "OPRES";
                case 21: return "VECTOR";
                case 22: return "CASE";
                case 23: return "IF";
                case 24: return "WHILE";
                case 25: return "LOOP";
                case 26: return "ELSIF";
                case 27: return "ELSE";
                case 28: return "FUNC";
                case 29: return "PIPE";
                case 30: return "SCAN";
                case 31: return "SOUT";
                case 32: return "SOUTLN";
                case 33: return "BREAK";
                case 34: return "DEFAULT";
                case 35: return "SWITCH";
                case 36: return "INT";
                case 37: return "DEF";
                case 38: return "FAKER";
                case 39: return "PAYBACK";
                case 40: return "EACH";
                case 41: return "INIT";
                case 42: return "NOT";
                case 43: return "CHAR";
                default: return "N/A";
                }
        }

        public void syntax_error(Symbol s){
                report_error("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n", null);

                syntacticErrors++;

                List expected = expected_token_ids();
                if (expected.size() != 0) {
                        int id;
                        System.out.println("Se esperaba...");
                        for (int i = 0; i < expected.size(); i++) {
            	                id = (int) expected.get(i);
            	                if (i == expected.size() - 1) {
            		                System.out.println(token_name_from_id(id));
            	                } else {
            		                System.out.print(token_name_from_id(id) + " | ");
            	                }
                        }
                }       

        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= INIT LPAR RPAR LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int initProgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int initProgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object initProg = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int leftParleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int leftParright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object leftPar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int rightParleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rightParright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object rightPar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int left_cbracketleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int left_cbracketright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object left_cbracket = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int mainbodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mainbodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object mainbody = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int right_cbracketleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int right_cbracketright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object right_cbracket = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INITIALIZE");
                nodo.setID(parser.count);
                parser.count++;

                //Terminal init
                Nodo initProgn = new Nodo();
                initProgn.setEtiqueta("INITIAL");
                initProgn.setID(parser.count);
                initProgn.setValor(initProg.toString());
                parser.count++;
                //initp.setValor(id);

                nodo.addHijos(initProgn);

                //Terminal leftPar
               // Nodo leftParn = new Nodo();
                //leftParn.setEtiqueta("Left Parenthesis");
                //leftParn.setID(parser.count);
                //leftParn.setValor(leftPar.toString());
                //parser.count++;

                //nodo.addHijos(leftParn);

                //Terminal rightPar
                //Nodo rightParn = new Nodo();
                //rightParn.setEtiqueta("Right Parenthesis");
                //rightParn.setID(parser.count);
                //rightParn.setValor(")");
                //parser.count++;

                //nodo.addHijos(rightParn);

                //Terminal left C bracket
                //Nodo left_cbracketn = new Nodo();
                //left_cbracketn.setEtiqueta("Left C Bracket");
                //left_cbracketn.setID(parser.count);
                //left_cbracketn.setValor("{");
                //parser.count++;
                //nodo.addHijos(left_cbracketn);

                //Non terminal body
                nodo.addHijos((Nodo) mainbody);

                //Terminal Right C Bracket
                //Nodo right_cbracketn = new Nodo();
                //right_cbracketn.setEtiqueta("Right C Bracket");
                //right_cbracketn.setID(parser.count);
                //right_cbracketn.setValor("}");
                //parser.count++;
                //nodo.addHijos(right_cbracketn);

                parser.padre = nodo;

                RESULT = nodo;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= DEF tipo lista_ID SEMICOLON 
            {
              Object RESULT =null;
		int typeVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object typeV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lista_IDsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lista_IDsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lista_IDs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo declaraciones = new Nodo();
                declaraciones.setEtiqueta("Declaracion");
                declaraciones.setID(parser.count);
                parser.count++;

                declaraciones.addHijos((Nodo) typeV);
                declaraciones.addHijos((Nodo)lista_IDs);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                declaraciones.addHijos(semicolonN);
                //parser.padre = declaraciones;

                RESULT = declaraciones;

                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= proposition body 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                
                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                //Nodo props = new Nodo();
                //props.setEtiqueta("proposition");
                //props.setID(parser.count);
                //props.setValor(prop.toString());
                //parser.count++;

                bodyn.addHijos((Nodo) prop);
                if(bod!=null){
                        bodyn.addHijos(((Nodo) bod).getHijos());
                }
                //bodyn.addHijos((Nodo) bod );

                //parser.padre = bodyn;

                RESULT = bodyn;
                


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= functions body 
            {
              Object RESULT =null;
		int funcsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funcsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funcs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                bodyn.addHijos((Nodo) funcs);
                if(bod!=null){
                        bodyn.addHijos(((Nodo) bod).getHijos());
                }
                RESULT = bodyn;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= 
            {
              Object RESULT =null;
		

                /*
                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                Nodo empty = new Nodo();
                empty.setEtiqueta("EMPTY");
                empty.setID(parser.count);
                empty.setValor("null");
                parser.count++;
                
                bodyn.addHijos(empty);
                
                RESULT = bodyn;
                */
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bodyF ::= propositionF bodyF 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		

                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                //Nodo props = new Nodo();
                //props.setEtiqueta("proposition");
                //props.setID(parser.count);
                //props.setValor(prop.toString());
                //parser.count++;

                bodyn.addHijos((Nodo) prop);
                if(bod!=null){
                        bodyn.addHijos(((Nodo) bod).getHijos());
                }
                //bodyn.addHijos((Nodo) bod );

                //parser.padre = bodyn;

                RESULT = bodyn;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyF",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bodyF ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyF",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // proposition ::= WHILE expression LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo whileN = new Nodo();
                whileN.setEtiqueta("While");
                whileN.setID(parser.count);
                parser.count++;

                whileN.addHijos((Nodo) ex);
                whileN.addHijos((Nodo) bod);

                RESULT = whileN;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proposition ::= funcCall SEMICOLON 
            {
              Object RESULT =null;
		int funCleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funCright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funC = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT = funC;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proposition ::= forLoop 
            {
              Object RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object forl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = forl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proposition ::= ifStatement 
            {
              Object RESULT =null;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ifS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = ifS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proposition ::= switchCase 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = sc;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proposition ::= declaraciones 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo proposition = new Nodo();
                //proposition.setID(parser.count++);
                //proposition.setEtiqueta("propositionDecl");
                //parser.count++;

                //proposition.addHijos((Nodo) decl);

                //parser.padre = proposition;
                RESULT = decl;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proposition ::= declaracionSimple 
            {
              Object RESULT =null;
		int declSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object declS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               /*
                Nodo proposition = new Nodo();
                proposition.setID(parser.count);
                proposition.setEtiqueta("propositionDeclSimple");
                parser.count++;

                proposition.addHijos((Nodo)declS);
                parser.padre = proposition;
                */
                RESULT = declS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= imprimir 
            {
              Object RESULT =null;
		int printerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int printerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object printer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo printing = new Nodo();
                //printing.setID(parser.count);
                //printing.setEtiqueta("Printer");
                //printing.setValor(":=");
                //parser.count++;

                //printing.addHijos((Nodo) printer);
                //parser.padre = printing;
                RESULT = printer;


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= scanear 
            {
              Object RESULT =null;
		int scanleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scanright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object scan = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = scan;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= ID ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignacionID = new Nodo();
                asignacionID.setEtiqueta("asignacion a valor");
                asignacionID.setID(parser.count);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                asignacionID.addHijos(idData);

                asignacionID.addHijos((Nodo) ex);

                RESULT = asignacionID;

        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propositionF ::= WHILE expression LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo whileN = new Nodo();
                whileN.setEtiqueta("While");
                whileN.setID(parser.count);
                parser.count++;

                whileN.addHijos((Nodo) ex);
                whileN.addHijos((Nodo) bod);

                RESULT = whileN;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propositionF ::= funcCall SEMICOLON 
            {
              Object RESULT =null;
		int funCleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funCright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funC = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT = funC;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propositionF ::= forLoop 
            {
              Object RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object forl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = forl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propositionF ::= ifStatement 
            {
              Object RESULT =null;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ifS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = ifS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propositionF ::= switchCase 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = sc;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propositionF ::= declaraciones 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo proposition = new Nodo();
                //proposition.setID(parser.count++);
                //proposition.setEtiqueta("propositionDecl");
                //parser.count++;

                //proposition.addHijos((Nodo) decl);

                //parser.padre = proposition;
                RESULT = decl;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // propositionF ::= declaracionSimple 
            {
              Object RESULT =null;
		int declSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object declS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               /*
                Nodo proposition = new Nodo();
                proposition.setID(parser.count);
                proposition.setEtiqueta("propositionDeclSimple");
                parser.count++;

                proposition.addHijos((Nodo)declS);
                parser.padre = proposition;
                */
                RESULT = declS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // propositionF ::= imprimir 
            {
              Object RESULT =null;
		int printerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int printerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object printer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo printing = new Nodo();
                //printing.setID(parser.count);
                //printing.setEtiqueta("Printer");
                //printing.setValor(":=");
                //parser.count++;

                //printing.addHijos((Nodo) printer);
                //parser.padre = printing;
                RESULT = printer;


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // propositionF ::= scanear 
            {
              Object RESULT =null;
		int scanleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scanright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object scan = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = scan;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // propositionF ::= ID ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignacionID = new Nodo();
                asignacionID.setEtiqueta("asignacion a valor");
                asignacionID.setID(parser.count);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                asignacionID.addHijos(idData);

                asignacionID.addHijos((Nodo) ex);

                RESULT = asignacionID;

        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // propositionF ::= PAYBACK retValsF 
            {
              Object RESULT =null;
		int rvfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rvfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object rvf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=rvf;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcCall ::= ID LPAR params RPAR 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo funCaller = new Nodo();
                funCaller.setEtiqueta("Func call");
                funCaller.setID(parser.count);
                funCaller.setValor(idP.toString());
                parser.count++;

                funCaller.addHijos((Nodo) pr);

                RESULT = funCaller;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcCall",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // imprimir ::= SOUT LPAR ID RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int lPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int lPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object lP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object rP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion");
                impresion.setID(parser.count);
                impresion.setValor("printer");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out");
                souter.setID(parser.count);
                souter.setValor(st.toString());

                impresion.addHijos(souter);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                impresion.addHijos(idData);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // imprimir ::= SOUTLN LPAR ID RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion con Salto de linea");
                impresion.setID(parser.count);
                impresion.setValor("printerLN");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out ln");
                souter.setID(parser.count);
                souter.setValor(stl.toString());

                impresion.addHijos(souter);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                impresion.addHijos(idData);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;

        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // imprimir ::= SOUT LPAR values RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		

                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion");
                impresion.setID(parser.count);
                impresion.setValor("printer");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out");
                souter.setID(parser.count);
                souter.setValor(st.toString());

                impresion.addHijos(souter);
                parser.count++;

                impresion.addHijos((Nodo) vals);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;
        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // imprimir ::= SOUTLN LPAR values RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion con Salto de linea");
                impresion.setID(parser.count);
                impresion.setValor("printerLN");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out ln");
                souter.setID(parser.count);
                souter.setValor(stl.toString());

                impresion.addHijos(souter);
                parser.count++;

                impresion.addHijos((Nodo) vals);


                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;
        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // forLoop ::= LOOP LSBRACKET body RSBRACKET EACH LPAR ID RPAR 
            {
              Object RESULT =null;
		int looperleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int looperright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object looper = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int propsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int propsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object props = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int eachWleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eachWright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object eachW = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		

                Nodo loopN = new Nodo();
                loopN.setEtiqueta("For loop");
                loopN.setID(parser.count);
                loopN.setValor(looper.toString());
                parser.count++;

                loopN.addHijos((Nodo)props);

                Nodo eachP = new Nodo();
                eachP.setEtiqueta("Each id");
                eachP.setID(parser.count);
                eachP.setValor(eachW.toString());

                parser.count++;

                loopN.addHijos(eachP);

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                loopN.addHijos(idData);

                RESULT = loopN;



              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forLoop",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionSimple ::= DEF tipo ID decl_v_e 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo DeclSimple = new Nodo();
                DeclSimple.setEtiqueta("Decl Simple");
                DeclSimple.setID(parser.count);
                DeclSimple.setValor("Declaracion simple");
                parser.count++;

                Nodo definer = new Nodo();
                definer.setEtiqueta("def");
                definer.setID(parser.count);
                definer.setValor("DEF");
                parser.count++;

                DeclSimple.addHijos(definer);
                DeclSimple.addHijos((Nodo) type);
                
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                DeclSimple.addHijos(idData);
                DeclSimple.addHijos((Nodo) dv);

                //parser.padre = DeclSimple;

                RESULT = DeclSimple;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionSimple",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // functions ::= FUNC tipo ID LPAR params RPAR LCBRACKET bodyF RCBRACKET 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo funcT = new Nodo();
                funcT.setEtiqueta("Function");
                funcT.setID(parser.count);
                funcT.setValor(idP.toString());

                parser.count++;
                funcT.addHijos((Nodo)type);
                funcT.addHijos((Nodo)pr);
                funcT.addHijos((Nodo)bod);

                RESULT= funcT;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // retValsF ::= values SEMICOLON 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT= vals;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // retValsF ::= funcCall SEMICOLON 
            {
              Object RESULT =null;
		int funClleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funClright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funCl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT= funCl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // retValsF ::= ID SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                RESULT = idData;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // params ::= tipo ID params 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                 Nodo paramsN = new Nodo();
                paramsN.setID(parser.count);
                paramsN.setEtiqueta("Parametros");
                paramsN.setValor(" ");

                parser.count++;
                paramsN.addHijos((Nodo) type);

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                paramsN.addHijos(idData);

                if(pL!=null){
                        paramsN.addHijos(((Nodo) pL).getHijos());
                }

                RESULT = paramsN;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // params ::= ID params 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo paramsN = new Nodo();
                paramsN.setID(parser.count);
                paramsN.setEtiqueta("Parametros");
                paramsN.setValor(" ");
                parser.count++;
        
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                if(pL!=null){
                        paramsN.addHijos(((Nodo) pL).getHijos());
                }

                RESULT = paramsN;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // params ::= values params 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo paramsN = new Nodo();
                paramsN.setID(parser.count);
                paramsN.setEtiqueta("Parametros");
                paramsN.setValor(" ");
                parser.count++;

                paramsN.addHijos((Nodo) vals);

                if(pL!=null){
                        paramsN.addHijos(((Nodo) pL).getHijos());
                }

                RESULT = vals; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // params ::= COMMA params 
            {
              Object RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = pL;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // params ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // scanear ::= ID ASSIGNMENT SCAN LPAR tipo RPAR SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int scanPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int scanPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object scanP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int typeVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object typeV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo scanear = new Nodo();
                scanear.setEtiqueta("Scanner");
                scanear.setID(parser.count);
                scanear.setValor("");

                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                scanear.addHijos(idData);

                Nodo scanerW = new Nodo();
                scanerW.setEtiqueta("scaner");
                scanerW.setID(parser.count);
                scanerW.setValor(scanP.toString());
                parser.count++;

                scanear.addHijos(scanerW);

                scanear.addHijos((Nodo)typeV);

                RESULT = scanear;
                


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("scanear",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_ID ::= ID lista_ID 
            {
              Object RESULT =null;
		

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_ID",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_ID ::= COMMA lista_ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_ID",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista_ID ::= empty 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_ID",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decl_v_e ::= SEMICOLON 
            {
              Object RESULT =null;
		
                Nodo declV = new Nodo();
                declV.setEtiqueta("decl Val");
                declV.setID(parser.count);
                declV.setValor("D V");
                parser.count++;

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                declV.addHijos( semicolonN );

                //parser.padre = declV;

                RESULT = declV;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_v_e",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl_v_e ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo asigner = new Nodo();
                asigner.setEtiqueta("Asignacion");
                asigner.setID(parser.count);
                asigner.setValor("=");
                parser.count++;

                asigner.addHijos((Nodo) asign);

                RESULT = asigner;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_v_e",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignado = new Nodo();
                asignado.setEtiqueta("Assignment con value");
                asignado.setID(parser.count);
                asignado.setValor("=");
                parser.count++;

                Nodo asigner = new Nodo();
                asigner.setEtiqueta("ASSIGNMENT");
                asigner.setID(parser.count);
                asigner.setValor(as.toString());
                parser.count++;

                asignado.addHijos(asigner);
                asignado.addHijos((Nodo) vals);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                asignado.addHijos(semicolonN);
                //parser.padre = asignado;

                RESULT = asignado;



        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= ASSIGNMENT NOTHING SEMICOLON 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nhleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nhright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nh = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignado = new Nodo();
                asignado.setEtiqueta("Assignment void");
                asignado.setID(parser.count);
                asignado.setValor("=");
                parser.count++;

                Nodo asigner = new Nodo();
                asigner.setEtiqueta("ASSIGNMENT");
                asigner.setID(parser.count);
                asigner.setValor(as.toString());
                parser.count++;

                asignado.addHijos(asigner);

                Nodo voidV = new Nodo();
                voidV.setEtiqueta("Void");
                voidV.setID(parser.count);
                voidV.setValor(nh.toString());
                parser.count++;

                asignado.addHijos(voidV);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                asignado.addHijos(semicolonN);

                RESULT = asignado;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= INT 
            {
              Object RESULT =null;
		
                Nodo declI = new Nodo();
                declI.setEtiqueta("Integer");
                declI.setID(parser.count);
                declI.setValor("INT");
                parser.count++;  

                RESULT = declI;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= FAKER 
            {
              Object RESULT =null;
		
                Nodo declF = new Nodo();
                declF.setEtiqueta("boolean");
                declF.setID(parser.count);
                declF.setValor("FAKER");
                parser.count++;  

                RESULT = declF;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= CHAR 
            {
              Object RESULT =null;
		
                Nodo declC = new Nodo();
                declC.setEtiqueta("character");
                declC.setID(parser.count);
                declC.setValor("CHAR");
                parser.count++;  

                RESULT = declC;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // caseTypes ::= LETTERS 
            {
              Object RESULT =null;
		int lChleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lChright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lCh = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo letterChar = new Nodo();
                letterChar.setEtiqueta("val Char");
                letterChar.setID(parser.count);
                letterChar.setValor(lCh.toString());
                parser.count++;

                RESULT = letterChar;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caseTypes",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caseTypes ::= INTEGER 
            {
              Object RESULT =null;
		int intVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int intVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object intV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo intVal = new Nodo();
                intVal.setEtiqueta("int val");
                intVal.setID(parser.count);
                intVal.setValor(intV.toString());
                parser.count++;

                RESULT = intVal;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caseTypes",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoVS ::= DEF VECTOR ID ASSIGNMENT vectorData 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipoVS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vectorData ::= LSBRACKET vectorData RSBRACKET 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("vectorData",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vectorData ::= values COMMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("vectorData",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // values ::= BOOL 
            {
              Object RESULT =null;
		int booleanVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int booleanVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object booleanV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo boolFaker = new Nodo();
                boolFaker.setEtiqueta("val Faker");
                boolFaker.setID(parser.count);
                boolFaker.setValor(booleanV.toString());
                parser.count++;

                RESULT = boolFaker;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // values ::= LETTERS 
            {
              Object RESULT =null;
		int lChleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lChright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lCh = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo letterChar = new Nodo();
                letterChar.setEtiqueta("val Char");
                letterChar.setID(parser.count);
                letterChar.setValor(lCh.toString());
                parser.count++;

                RESULT = letterChar;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // values ::= INTEGER 
            {
              Object RESULT =null;
		int intVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int intVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object intV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo intVal = new Nodo();
                intVal.setEtiqueta("int val");
                intVal.setID(parser.count);
                intVal.setValor(intV.toString());
                parser.count++;

                RESULT = intVal;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifStatement ::= IF expression LCBRACKET body RCBRACKET elsiffer 
            {
              Object RESULT =null;
		int iferWleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int iferWright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object iferW = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo ifState = new Nodo();
                ifState.setID(parser.count);
                ifState.setEtiqueta("if State");
                parser.count++;

                Nodo ifer = new Nodo();
                ifer.setID(parser.count);
                ifer.setEtiqueta("if w");
                ifer.setValor(iferW.toString());
                parser.count++;

                ifState.addHijos(ifer);
                ifState.addHijos((Nodo) ex);
                ifState.addHijos((Nodo) prop);
                if(elsif!=null){
                        ifState.addHijos((Nodo) elsif);
                }

                RESULT = ifState;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elsiffer ::= ELSIF expression LCBRACKET body RCBRACKET elsiffer 
            {
              Object RESULT =null;
		int elsiferleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int elsiferright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object elsifer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elseRleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elseRright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object elseR = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo elsifCase = new Nodo();
                elsifCase.setEtiqueta("Else if");
                elsifCase.setID(parser.count);
                elsifCase.setValor(elsifer.toString());
                parser.count++;

                elsifCase.addHijos((Nodo) ex);
                elsifCase.addHijos((Nodo) prop);

                //if(elseR!=null){
                //        elsifCase.addHijos(((Nodo) elseR).getHijos());
                //}
                elsifCase.addHijos((Nodo) elseR);
                RESULT = elsifCase;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elsiffer",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elsiffer ::= ELSE LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo elseFinal = new Nodo();
                elseFinal.setEtiqueta("Else final");
                elseFinal.setID(parser.count);
                elseFinal.setValor("ELSE");
                parser.count++;

                elseFinal.addHijos((Nodo) prop);

                RESULT = elseFinal;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elsiffer",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elsiffer ::= 
            {
              Object RESULT =null;
		
                 
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elsiffer",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // switchCase ::= SWITCH LPAR ID RPAR LCBRACKET cases RCBRACKET 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo switcher = new Nodo();
                switcher.setID(parser.count);
                switcher.setEtiqueta("switch case");
                switcher.setValor("SWITCH");
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID Base");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                switcher.addHijos(idData);
                //if(cs!=null){
                //        switcher.addHijos(((Nodo) cs).getHijos());
                //}
                switcher.addHijos((Nodo)cs);


                RESULT = switcher;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switchCase",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cases ::= CASE caseTypes COLON body BREAK SEMICOLON cases 
            {
              Object RESULT =null;
		int cTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int csRleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int csRright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object csR = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo caseX = new Nodo();
                caseX.setEtiqueta("Cases");
                caseX.setID(parser.count);
                caseX.setValor(" ");
                parser.count++;
                
                Nodo casoL = new Nodo();
                casoL.setEtiqueta("Case");
                casoL.setID(parser.count);
                casoL.setValor(" ");
                parser.count++;

                casoL.addHijos((Nodo) cT);
                casoL.addHijos((Nodo)bod);
                caseX.addHijos(casoL);
                

                if(csR!=null){
                        caseX.addHijos(((Nodo) csR).getHijos());
                }
                //caseX.addHijos((Nodo)csR);
                RESULT = caseX;


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cases ::= DEFAULT COLON body BREAK SEMICOLON 
            {
              Object RESULT =null;
		int defltleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int defltright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object deflt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo caseRet = new Nodo();
                caseRet.setEtiqueta("Ret default");
                caseRet.setID(parser.count);
                parser.count++;

                Nodo caseX = new Nodo();
                caseX.setEtiqueta("Case DEFAULT");
                caseX.setID(parser.count);
                caseX.setValor(deflt.toString());


                parser.count++;

                caseX.addHijos((Nodo) bod);

                caseRet.addHijos(caseX);
                RESULT = caseRet;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expresion_simple 
            {
              Object RESULT =null;
		int exSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = exS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expresion_simple OPREL expresion_simple 
            {
              Object RESULT =null;
		int exSLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exSLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exSL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exSRleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exSRright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exSR = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo exprOprel = new Nodo ();
                exprOprel.setEtiqueta("Expr con oprel");
                exprOprel.setID(parser.count);
                parser.count++;

                exprOprel.addHijos((Nodo) exSL);

                Nodo oprelN = new Nodo();
                oprelN.setEtiqueta("op relacional");
                oprelN.setID(parser.count);
                oprelN.setValor(opr.toString());

                parser.count++;

                exprOprel.addHijos((Nodo) exSR);

                RESULT = exprOprel;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= COLON funcCall 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=fc;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_simple ::= termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = term;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_simple ::= signo termino 
            {
              Object RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo signTERM = new Nodo();
                signTERM.setID(parser.count);
                signTERM.setEtiqueta("termino con signo");
                parser.count++;
                
                signTERM.addHijos((Nodo) sig);
                signTERM.addHijos((Nodo) term);

                RESULT = signTERM;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_simple ::= expresion_simple OPSUMA termino 
            {
              Object RESULT =null;
		int exSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object opS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo exTERM = new Nodo();
                exTERM.setID(parser.count);
                exTERM.setEtiqueta("expr suma termino");
                parser.count++;

                exTERM.addHijos((Nodo) exS);
                Nodo simbolo = new Nodo();
                simbolo.setID(parser.count);
                simbolo.setEtiqueta("Operador de suma");
                simbolo.setValor(opS.toString());
                exTERM.addHijos((Nodo) term);

                RESULT = exTERM;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino ::= factor 
            {
              Object RESULT =null;
		int factorXleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int factorXright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object factorX = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = factorX;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino ::= termino OPMULT factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opMleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opMright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object opM = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo termFactor = new Nodo();
                termFactor.setID(parser.count);
                termFactor.setEtiqueta("Termino con factor");
                parser.count++;

                termFactor.addHijos((Nodo) term);
                Nodo simbolo = new Nodo();
                simbolo.setID(parser.count);
                simbolo.setEtiqueta("Operador de Mult");
                simbolo.setValor(opM.toString());
                parser.count++;

                termFactor.addHijos((Nodo) fac);

                RESULT = termFactor;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= ID 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                RESULT = idData;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= ID LPAR lista_expresiones RPAR 
            {
              Object RESULT =null;
		

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= values 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = vals;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= LPAR expression RPAR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT = ex;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo notF = new Nodo();
                notF.setEtiqueta("Not factor");
                notF.setID(parser.count);
                parser.count++;

                Nodo notW = new Nodo();
                notW.setEtiqueta("Not");
                notW.setID(parser.count);
                notW.setValor(nt.toString());
                parser.count++;

                notF.addHijos(notW);
                notF.addHijos((Nodo)fac);

                RESULT = notF;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // signo ::= OPSUMA 
            {
              Object RESULT =null;
		int opSumleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opSumright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object opSum = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo operador = new Nodo();
        operador.setEtiqueta("opSuma");
        operador.setID(parser.count);
        operador.setValor(opSum.toString());
        parser.count++;

        RESULT = operador;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_expresiones ::= expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = ex;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_expresiones ::= lista_expresiones COMMA expression 
            {
              Object RESULT =null;
		


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
