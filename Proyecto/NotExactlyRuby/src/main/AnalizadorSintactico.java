
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.util.*;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\010\000\002\002" +
    "\003\000\002\003\006\000\002\030\004\000\002\030\004" +
    "\000\002\030\002\000\002\043\004\000\002\043\002\000" +
    "\002\023\007\000\002\023\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\006" +
    "\000\002\023\003\000\002\023\003\000\002\044\007\000" +
    "\002\044\004\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\006\000\002\044\004" +
    "\000\002\044\003\000\002\044\003\000\002\037\006\000" +
    "\002\035\007\000\002\035\007\000\002\035\007\000\002" +
    "\035\007\000\002\025\012\000\002\017\006\000\002\017" +
    "\004\000\002\020\013\000\002\045\004\000\002\045\004" +
    "\000\002\045\004\000\002\045\003\000\002\021\005\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\003\000\002\021\002\000\002\036\011\000\002\033" +
    "\004\000\002\033\004\000\002\033\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\024\005\000" +
    "\002\024\005\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\007\010\000\002\007\006" +
    "\000\002\041\005\000\002\042\005\000\002\042\003\000" +
    "\002\042\005\000\002\031\003\000\002\031\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\010\000\002\022\010\000\002\022\006\000\002\022\002" +
    "\000\002\026\011\000\002\027\011\000\002\027\007\000" +
    "\002\012\003\000\002\012\005\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\013\005\000\002\014\003\000\002\014\005" +
    "\000\002\015\003\000\002\015\006\000\002\015\003\000" +
    "\002\015\005\000\002\015\004\000\002\016\003\000\002" +
    "\034\003\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\006\003\006\053\005\001\002\000\004\002" +
    "\346\001\002\000\004\011\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\012\010\001\002\000\004\015\011\001" +
    "\002\000\030\003\034\010\022\016\ufffb\031\021\032\014" +
    "\033\015\036\026\041\016\042\012\045\020\047\030\001" +
    "\002\000\004\011\337\001\002\000\034\003\ufff4\010\ufff4" +
    "\014\ufff4\016\ufff4\031\ufff4\032\ufff4\033\ufff4\036\ufff4\041" +
    "\ufff4\042\ufff4\043\ufff4\045\ufff4\047\ufff4\001\002\000\026" +
    "\003\103\004\104\005\075\006\105\010\072\011\106\013" +
    "\073\017\071\024\067\054\070\001\002\000\004\013\324" +
    "\001\002\000\004\011\315\001\002\000\034\003\ufff1\010" +
    "\ufff1\014\ufff1\016\ufff1\031\ufff1\032\ufff1\033\ufff1\036\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\045\ufff1\047\ufff1\001\002\000" +
    "\004\011\270\001\002\000\026\003\103\004\104\005\075" +
    "\006\105\010\072\011\106\013\073\017\071\024\067\054" +
    "\070\001\002\000\006\011\144\020\246\001\002\000\034" +
    "\003\ufff2\010\ufff2\014\ufff2\016\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\036\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\047\ufff2" +
    "\001\002\000\004\016\245\001\002\000\034\003\ufff6\010" +
    "\ufff6\014\ufff6\016\ufff6\031\ufff6\032\ufff6\033\ufff6\036\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\045\ufff6\047\ufff6\001\002\000" +
    "\012\003\045\046\050\050\044\055\047\001\002\000\004" +
    "\021\170\001\002\000\014\003\045\027\043\046\050\050" +
    "\044\055\047\001\002\000\034\003\034\010\022\014\ufffb" +
    "\016\ufffb\031\021\032\014\033\015\036\026\041\016\042" +
    "\012\043\ufffb\045\020\047\030\001\002\000\034\003\uffee" +
    "\010\uffee\014\uffee\016\uffee\031\uffee\032\uffee\033\uffee\036" +
    "\uffee\041\uffee\042\uffee\043\uffee\045\uffee\047\uffee\001\002" +
    "\000\034\003\ufff5\010\ufff5\014\ufff5\016\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\036\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5" +
    "\047\ufff5\001\002\000\036\003\uffed\010\uffed\014\uffed\016" +
    "\uffed\021\041\031\uffed\032\uffed\033\uffed\036\uffed\041\uffed" +
    "\042\uffed\043\uffed\045\uffed\047\uffed\001\002\000\034\003" +
    "\ufff0\010\ufff0\014\ufff0\016\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\036\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0\047\ufff0\001" +
    "\002\000\034\003\ufff3\010\ufff3\014\ufff3\016\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\036\ufff3\041\ufff3\042\ufff3\043\ufff3\045" +
    "\ufff3\047\ufff3\001\002\000\034\003\034\010\022\014\ufffb" +
    "\016\ufffb\031\021\032\014\033\015\036\026\041\016\042" +
    "\012\043\ufffb\045\020\047\030\001\002\000\010\014\ufffd" +
    "\016\ufffd\043\ufffd\001\002\000\036\003\uffd8\010\uffd8\014" +
    "\uffd8\016\uffd8\031\uffd8\032\uffd8\033\uffd8\036\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\047\uffd8\051\uffd8\001\002\000" +
    "\010\014\ufffc\016\ufffc\043\ufffc\001\002\000\004\010\163" +
    "\001\002\000\010\010\uffc2\012\uffc2\022\uffc2\001\002\000" +
    "\010\010\uffc0\012\uffc0\022\uffc0\001\002\000\006\010\052" +
    "\022\051\001\002\000\010\010\uffc1\012\uffc1\022\uffc1\001" +
    "\002\000\010\010\uffc3\012\uffc3\022\uffc3\001\002\000\006" +
    "\010\061\022\051\001\002\000\014\003\062\010\061\020" +
    "\057\021\064\022\051\001\002\000\004\021\055\001\002" +
    "\000\004\021\uffc9\001\002\000\036\003\ufffe\010\ufffe\014" +
    "\ufffe\016\ufffe\031\ufffe\032\ufffe\033\ufffe\036\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\045\ufffe\047\ufffe\051\ufffe\001\002\000" +
    "\036\003\uffd9\010\uffd9\014\uffd9\016\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\036\uffd9\041\uffd9\042\uffd9\043\uffd9\045\uffd9\047" +
    "\uffd9\051\uffd9\001\002\000\030\003\103\004\104\005\075" +
    "\006\105\007\074\010\072\011\106\013\073\017\071\024" +
    "\067\054\070\001\002\000\036\003\uffc7\010\uffc7\014\uffc7" +
    "\016\uffc7\031\uffc7\032\uffc7\033\uffc7\036\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\045\uffc7\047\uffc7\051\uffc7\001\002\000\006" +
    "\010\061\022\051\001\002\000\036\003\uffc6\010\uffc6\014" +
    "\uffc6\016\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\045\uffc6\047\uffc6\051\uffc6\001\002\000" +
    "\004\021\uffcb\001\002\000\036\003\uffc8\010\uffc8\014\uffc8" +
    "\016\uffc8\031\uffc8\032\uffc8\033\uffc8\036\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\045\uffc8\047\uffc8\051\uffc8\001\002\000\012" +
    "\012\uffa7\015\uffa7\021\uffa7\022\uffa7\001\002\000\020\012" +
    "\uff9e\015\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\001\002\000\016\004\uff9b\005\uff9b\006\uff9b\010\uff9b\011" +
    "\uff9b\054\uff9b\001\002\000\016\004\104\005\075\006\105" +
    "\010\072\011\106\054\070\001\002\000\004\010\142\001" +
    "\002\000\022\011\134\012\uffa0\015\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\001\002\000\014\004\104\005" +
    "\075\006\105\010\125\013\073\001\002\000\004\021\121" +
    "\001\002\000\042\003\uffb3\004\uffb3\005\uffb3\006\uffb3\010" +
    "\uffb3\012\uffb3\014\uffb3\015\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\046\uffb3\050\uffb3\055\uffb3\001\002\000" +
    "\004\021\120\001\002\000\016\012\uffaa\015\uffaa\021\uffaa" +
    "\022\uffaa\023\114\024\115\001\002\000\020\012\uffa2\015" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\001\002" +
    "\000\020\012\uffa5\015\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\112\001\002\000\016\004\104\005\075\006\105" +
    "\010\072\011\106\054\070\001\002\000\012\012\uffa6\015" +
    "\uffa6\021\uffa6\022\uffa6\001\002\000\042\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\010\uffb4\012\uffb4\014\uffb4\015\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\046\uffb4\050\uffb4" +
    "\055\uffb4\001\002\000\042\003\uffb2\004\uffb2\005\uffb2\006" +
    "\uffb2\010\uffb2\012\uffb2\014\uffb2\015\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\046\uffb2\050\uffb2\055\uffb2\001" +
    "\002\000\026\003\103\004\104\005\075\006\105\010\072" +
    "\011\106\013\073\017\071\024\067\054\070\001\002\000" +
    "\004\012\110\001\002\000\020\012\uff9d\015\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\001\002\000\020\012" +
    "\uffa4\015\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\112" +
    "\001\002\000\016\004\104\005\075\006\105\010\072\011" +
    "\106\054\070\001\002\000\020\012\uffa1\015\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\001\002\000\020\004" +
    "\104\005\075\006\105\010\072\011\106\024\067\054\070" +
    "\001\002\000\016\004\104\005\075\006\105\010\072\011" +
    "\106\054\070\001\002\000\020\012\uffa3\015\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\112\001\002\000\014\012" +
    "\uffa9\015\uffa9\021\uffa9\022\uffa9\024\115\001\002\000\036" +
    "\003\uffc5\010\uffc5\014\uffc5\016\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\036\uffc5\041\uffc5\042\uffc5\043\uffc5\045\uffc5\047\uffc5" +
    "\051\uffc5\001\002\000\036\003\uffc4\010\uffc4\014\uffc4\016" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\045\uffc4\047\uffc4\051\uffc4\001\002\000\004\014" +
    "\133\001\002\000\006\014\uffb8\022\131\001\002\000\004" +
    "\022\127\001\002\000\006\014\uffb5\022\uffb5\001\002\000" +
    "\006\014\uffb6\022\uffb6\001\002\000\004\013\073\001\002" +
    "\000\004\014\uffb7\001\002\000\014\004\104\005\075\006" +
    "\105\010\125\013\073\001\002\000\004\014\uffb9\001\002" +
    "\000\014\012\uffba\014\uffba\015\uffba\021\uffba\022\uffba\001" +
    "\002\000\026\003\103\004\104\005\075\006\105\010\072" +
    "\011\106\013\073\017\071\024\067\054\070\001\002\000" +
    "\006\012\140\022\137\001\002\000\006\012\uff9a\022\uff9a" +
    "\001\002\000\026\003\103\004\104\005\075\006\105\010" +
    "\072\011\106\013\073\017\071\024\067\054\070\001\002" +
    "\000\020\012\uff9f\015\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\001\002\000\006\012\uff99\022\uff99\001\002" +
    "\000\004\011\144\001\002\000\012\012\uffa8\015\uffa8\021" +
    "\uffa8\022\uffa8\001\002\000\026\003\147\004\104\005\075" +
    "\006\105\010\146\012\uffcd\022\150\046\050\050\044\055" +
    "\047\001\002\000\004\012\160\001\002\000\026\003\147" +
    "\004\104\005\075\006\105\010\146\012\uffcd\022\150\046" +
    "\050\050\044\055\047\001\002\000\006\010\uffc0\012\uffce" +
    "\001\002\000\026\003\147\004\104\005\075\006\105\010" +
    "\146\012\uffcd\022\150\046\050\050\044\055\047\001\002" +
    "\000\004\010\154\001\002\000\026\003\147\004\104\005" +
    "\075\006\105\010\146\012\uffcd\022\150\046\050\050\044" +
    "\055\047\001\002\000\004\012\uffd0\001\002\000\026\003" +
    "\147\004\104\005\075\006\105\010\146\012\uffcd\022\150" +
    "\046\050\050\044\055\047\001\002\000\004\012\uffd2\001" +
    "\002\000\004\012\uffcf\001\002\000\004\012\uffd1\001\002" +
    "\000\012\012\uffdf\015\uffdf\021\uffdf\022\uffdf\001\002\000" +
    "\020\012\uff9c\015\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\001\002\000\004\021\uffca\001\002\000\006\020" +
    "\164\021\165\001\002\000\004\013\073\001\002\000\036" +
    "\003\uffbb\010\uffbb\014\uffbb\016\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\036\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\047\uffbb" +
    "\051\uffbb\001\002\000\004\021\167\001\002\000\036\003" +
    "\uffbc\010\uffbc\014\uffbc\016\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\036\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\047\uffbc\051" +
    "\uffbc\001\002\000\034\003\ufff7\010\ufff7\014\ufff7\016\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\036\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\045\ufff7\047\ufff7\001\002\000\004\010\172\001\002" +
    "\000\004\011\173\001\002\000\026\003\147\004\104\005" +
    "\075\006\105\010\146\012\uffcd\022\150\046\050\050\044" +
    "\055\047\001\002\000\004\012\175\001\002\000\004\015" +
    "\176\001\002\000\030\003\212\010\203\016\ufff9\031\021" +
    "\032\201\033\015\041\016\042\012\045\020\047\030\051" +
    "\206\001\002\000\004\016\244\001\002\000\030\003\uffe8" +
    "\010\uffe8\016\uffe8\031\uffe8\032\uffe8\033\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\047\uffe8\051\uffe8\001\002\000\026\003\103" +
    "\004\104\005\075\006\105\010\072\011\106\013\073\017" +
    "\071\024\067\054\070\001\002\000\030\003\uffe5\010\uffe5" +
    "\016\uffe5\031\uffe5\032\uffe5\033\uffe5\041\uffe5\042\uffe5\045" +
    "\uffe5\047\uffe5\051\uffe5\001\002\000\006\011\144\020\230" +
    "\001\002\000\030\003\uffe6\010\uffe6\016\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\041\uffe6\042\uffe6\045\uffe6\047\uffe6\051\uffe6" +
    "\001\002\000\030\003\uffea\010\uffea\016\uffea\031\uffea\032" +
    "\uffea\033\uffea\041\uffea\042\uffea\045\uffea\047\uffea\051\uffea" +
    "\001\002\000\014\003\222\004\104\005\075\006\105\010" +
    "\220\001\002\000\004\021\217\001\002\000\030\003\uffe1" +
    "\010\uffe1\016\uffe1\031\uffe1\032\uffe1\033\uffe1\041\uffe1\042" +
    "\uffe1\045\uffe1\047\uffe1\051\uffe1\001\002\000\030\003\uffe9" +
    "\010\uffe9\016\uffe9\031\uffe9\032\uffe9\033\uffe9\041\uffe9\042" +
    "\uffe9\045\uffe9\047\uffe9\051\uffe9\001\002\000\032\003\uffe0" +
    "\010\uffe0\016\uffe0\021\041\031\uffe0\032\uffe0\033\uffe0\041" +
    "\uffe0\042\uffe0\045\uffe0\047\uffe0\051\uffe0\001\002\000\030" +
    "\003\212\010\203\016\ufff9\031\021\032\201\033\015\041" +
    "\016\042\012\045\020\047\030\051\206\001\002\000\030" +
    "\003\uffe4\010\uffe4\016\uffe4\031\uffe4\032\uffe4\033\uffe4\041" +
    "\uffe4\042\uffe4\045\uffe4\047\uffe4\051\uffe4\001\002\000\030" +
    "\003\uffe7\010\uffe7\016\uffe7\031\uffe7\032\uffe7\033\uffe7\041" +
    "\uffe7\042\uffe7\045\uffe7\047\uffe7\051\uffe7\001\002\000\004" +
    "\016\ufffa\001\002\000\030\003\uffeb\010\uffeb\016\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\041\uffeb\042\uffeb\045\uffeb\047\uffeb" +
    "\051\uffeb\001\002\000\006\011\144\021\227\001\002\000" +
    "\004\021\226\001\002\000\030\003\uffd3\010\uffd3\016\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\041\uffd3\042\uffd3\045\uffd3\047" +
    "\uffd3\051\uffd3\001\002\000\030\003\uffe2\010\uffe2\016\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\041\uffe2\042\uffe2\045\uffe2\047" +
    "\uffe2\051\uffe2\001\002\000\004\021\225\001\002\000\030" +
    "\003\uffd5\010\uffd5\016\uffd5\031\uffd5\032\uffd5\033\uffd5\041" +
    "\uffd5\042\uffd5\045\uffd5\047\uffd5\051\uffd5\001\002\000\030" +
    "\003\uffd6\010\uffd6\016\uffd6\031\uffd6\032\uffd6\033\uffd6\041" +
    "\uffd6\042\uffd6\045\uffd6\047\uffd6\051\uffd6\001\002\000\030" +
    "\003\uffd4\010\uffd4\016\uffd4\031\uffd4\032\uffd4\033\uffd4\041" +
    "\uffd4\042\uffd4\045\uffd4\047\uffd4\051\uffd4\001\002\000\030" +
    "\003\103\004\104\005\075\006\105\010\072\011\106\013" +
    "\073\017\071\024\067\040\232\054\070\001\002\000\004" +
    "\021\237\001\002\000\004\011\233\001\002\000\012\003" +
    "\045\046\050\050\044\055\047\001\002\000\004\012\235" +
    "\001\002\000\004\021\236\001\002\000\036\003\uffcc\010" +
    "\uffcc\014\uffcc\016\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\045\uffcc\047\uffcc\051\uffcc\001" +
    "\002\000\030\003\uffe3\010\uffe3\016\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\041\uffe3\042\uffe3\045\uffe3\047\uffe3\051\uffe3\001" +
    "\002\000\004\015\241\001\002\000\030\003\034\010\022" +
    "\016\ufffb\031\021\032\014\033\015\036\026\041\016\042" +
    "\012\045\020\047\030\001\002\000\004\016\243\001\002" +
    "\000\030\003\uffec\010\uffec\016\uffec\031\uffec\032\uffec\033" +
    "\uffec\041\uffec\042\uffec\045\uffec\047\uffec\051\uffec\001\002" +
    "\000\034\003\uffd7\010\uffd7\014\uffd7\016\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\036\uffd7\041\uffd7\042\uffd7\043\uffd7\045\uffd7" +
    "\047\uffd7\001\002\000\004\002\000\001\002\000\030\003" +
    "\103\004\104\005\075\006\105\010\072\011\106\013\073" +
    "\017\071\024\067\040\232\054\070\001\002\000\004\021" +
    "\250\001\002\000\034\003\uffef\010\uffef\014\uffef\016\uffef" +
    "\031\uffef\032\uffef\033\uffef\036\uffef\041\uffef\042\uffef\043" +
    "\uffef\045\uffef\047\uffef\001\002\000\004\015\252\001\002" +
    "\000\030\003\034\010\022\016\ufffb\031\021\032\014\033" +
    "\015\036\026\041\016\042\012\045\020\047\030\001\002" +
    "\000\004\016\254\001\002\000\042\003\uffae\010\uffae\014" +
    "\uffae\016\uffae\031\uffae\032\uffae\033\uffae\034\257\035\255" +
    "\036\uffae\041\uffae\042\uffae\043\uffae\045\uffae\047\uffae\051" +
    "\uffae\001\002\000\004\015\265\001\002\000\036\003\uffb1" +
    "\010\uffb1\014\uffb1\016\uffb1\031\uffb1\032\uffb1\033\uffb1\036" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\047\uffb1\051\uffb1" +
    "\001\002\000\026\003\103\004\104\005\075\006\105\010" +
    "\072\011\106\013\073\017\071\024\067\054\070\001\002" +
    "\000\004\015\261\001\002\000\030\003\034\010\022\016" +
    "\ufffb\031\021\032\014\033\015\036\026\041\016\042\012" +
    "\045\020\047\030\001\002\000\004\016\263\001\002\000" +
    "\042\003\uffae\010\uffae\014\uffae\016\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\257\035\255\036\uffae\041\uffae\042\uffae\043" +
    "\uffae\045\uffae\047\uffae\051\uffae\001\002\000\036\003\uffb0" +
    "\010\uffb0\014\uffb0\016\uffb0\031\uffb0\032\uffb0\033\uffb0\036" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\045\uffb0\047\uffb0\051\uffb0" +
    "\001\002\000\030\003\034\010\022\016\ufffb\031\021\032" +
    "\014\033\015\036\026\041\016\042\012\045\020\047\030" +
    "\001\002\000\004\016\267\001\002\000\036\003\uffaf\010" +
    "\uffaf\014\uffaf\016\uffaf\031\uffaf\032\uffaf\033\uffaf\036\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\045\uffaf\047\uffaf\051\uffaf\001" +
    "\002\000\004\010\271\001\002\000\004\012\272\001\002" +
    "\000\004\015\273\001\002\000\006\030\276\044\274\001" +
    "\002\000\004\017\311\001\002\000\004\016\310\001\002" +
    "\000\010\003\301\005\302\006\300\001\002\000\004\017" +
    "\303\001\002\000\004\017\uffbe\001\002\000\004\017\uffbd" +
    "\001\002\000\004\017\uffbf\001\002\000\030\003\034\010" +
    "\022\031\021\032\014\033\015\036\026\041\016\042\012" +
    "\043\ufffb\045\020\047\030\001\002\000\004\043\305\001" +
    "\002\000\004\021\306\001\002\000\006\030\276\044\274" +
    "\001\002\000\004\016\uffac\001\002\000\036\003\uffad\010" +
    "\uffad\014\uffad\016\uffad\031\uffad\032\uffad\033\uffad\036\uffad" +
    "\041\uffad\042\uffad\043\uffad\045\uffad\047\uffad\051\uffad\001" +
    "\002\000\030\003\034\010\022\031\021\032\014\033\015" +
    "\036\026\041\016\042\012\043\ufffb\045\020\047\030\001" +
    "\002\000\004\043\313\001\002\000\004\021\314\001\002" +
    "\000\004\016\uffab\001\002\000\012\004\104\005\075\006" +
    "\105\010\316\001\002\000\004\012\322\001\002\000\004" +
    "\012\320\001\002\000\004\021\321\001\002\000\036\003" +
    "\uffdc\010\uffdc\014\uffdc\016\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\036\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc\047\uffdc\051" +
    "\uffdc\001\002\000\004\021\323\001\002\000\036\003\uffde" +
    "\010\uffde\014\uffde\016\uffde\031\uffde\032\uffde\033\uffde\036" +
    "\uffde\041\uffde\042\uffde\043\uffde\045\uffde\047\uffde\051\uffde" +
    "\001\002\000\030\003\034\010\022\014\ufffb\031\021\032" +
    "\014\033\015\036\026\041\016\042\012\045\020\047\030" +
    "\001\002\000\004\014\326\001\002\000\004\052\327\001" +
    "\002\000\004\011\330\001\002\000\004\010\331\001\002" +
    "\000\004\012\332\001\002\000\036\003\uffda\010\uffda\014" +
    "\uffda\016\uffda\031\uffda\032\uffda\033\uffda\036\uffda\041\uffda" +
    "\042\uffda\043\uffda\045\uffda\047\uffda\051\uffda\001\002\000" +
    "\004\015\334\001\002\000\030\003\034\010\022\016\ufffb" +
    "\031\021\032\014\033\015\036\026\041\016\042\012\045" +
    "\020\047\030\001\002\000\004\016\336\001\002\000\034" +
    "\003\ufff8\010\ufff8\014\ufff8\016\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\036\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\047\ufff8" +
    "\001\002\000\012\004\104\005\075\006\105\010\340\001" +
    "\002\000\004\012\344\001\002\000\004\012\342\001\002" +
    "\000\004\021\343\001\002\000\036\003\uffdb\010\uffdb\014" +
    "\uffdb\016\uffdb\031\uffdb\032\uffdb\033\uffdb\036\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\045\uffdb\047\uffdb\051\uffdb\001\002\000" +
    "\004\021\345\001\002\000\036\003\uffdd\010\uffdd\014\uffdd" +
    "\016\uffdd\031\uffdd\032\uffdd\033\uffdd\036\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\045\uffdd\047\uffdd\051\uffdd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\035\007\031\011\032\017\022\020" +
    "\030\023\036\025\024\026\012\030\023\035\016\036\034" +
    "\037\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\065\012\332\013\076\014\100\015\077\016\101" +
    "\041\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\065\012\250" +
    "\013\076\014\100\015\077\016\101\041\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\170\001\001\000\002\001\001\000" +
    "\004\006\045\001\001\000\032\003\035\007\031\011\032" +
    "\017\022\020\030\023\036\025\024\026\012\030\041\035" +
    "\016\036\034\037\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\035\007\031\011\032\017\022\020\030" +
    "\023\036\025\024\026\012\030\037\035\016\036\034\037" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\053\033\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\053\033\161\001\001\000" +
    "\012\004\055\024\057\032\053\033\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\065\012\075\013\076\014\100\015\077" +
    "\016\101\041\064\001\001\000\002\001\001\000\006\032" +
    "\053\033\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\065\015\160\001\001\000\004" +
    "\037\142\001\001\000\002\001\001\000\012\010\125\031" +
    "\122\041\123\042\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\065\014\110\015\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\065\012\106\013\076\014\100\015\077" +
    "\016\101\041\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\065\015\112\001\001" +
    "\000\002\001\001\000\014\010\065\013\116\014\100\015" +
    "\077\016\101\001\001\000\010\010\065\014\115\015\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\127\001\001\000\002\001\001\000\012\010\125" +
    "\031\122\041\123\042\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\065\012\135\013\076\014\100" +
    "\015\077\016\101\034\134\041\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\065\012\140\013\076" +
    "\014\100\015\077\016\101\041\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\150\010\151\021\144\001\001\000\002\001" +
    "\001\000\010\006\150\010\151\021\156\001\001\000\002" +
    "\001\001\000\010\006\150\010\151\021\155\001\001\000" +
    "\002\001\001\000\010\006\150\010\151\021\152\001\001" +
    "\000\002\001\001\000\010\006\150\010\151\021\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\150\010\151" +
    "\021\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\214\007\207\011\210\017\203\025\204\026\177" +
    "\035\201\036\213\037\206\043\176\044\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\065\012\237" +
    "\013\076\014\100\015\077\016\101\041\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\220\037\223\045\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\214\007\207\011\210\017\203\025" +
    "\204\026\177\035\201\036\213\037\206\043\215\044\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\065\012\230\013\076\014\100\015\077\016\101\041" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\035\007\031\011\032\017\022\020\030\023\036\025" +
    "\024\026\012\030\241\035\016\036\034\037\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\065\012\246\013\076\014\100" +
    "\015\077\016\101\041\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\035\007\031" +
    "\011\032\017\022\020\030\023\036\025\024\026\012\030" +
    "\252\035\016\036\034\037\026\001\001\000\002\001\001" +
    "\000\004\022\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\065\012\257\013\076\014\100\015\077" +
    "\016\101\041\064\001\001\000\002\001\001\000\032\003" +
    "\035\007\031\011\032\017\022\020\030\023\036\025\024" +
    "\026\012\030\261\035\016\036\034\037\026\001\001\000" +
    "\002\001\001\000\004\022\263\001\001\000\002\001\001" +
    "\000\032\003\035\007\031\011\032\017\022\020\030\023" +
    "\036\025\024\026\012\030\265\035\016\036\034\037\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\035\007\031\011" +
    "\032\017\022\020\030\023\036\025\024\026\012\030\303" +
    "\035\016\036\034\037\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\035\007\031\011\032\017" +
    "\022\020\030\023\036\025\024\026\012\030\311\035\016" +
    "\036\034\037\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\035" +
    "\007\031\011\032\017\022\020\030\023\036\025\024\026" +
    "\012\030\324\035\016\036\034\037\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\035\007\031\011\032\017\022\020\030\023" +
    "\036\025\024\026\012\030\334\035\016\036\034\037\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        //Contador para ids de los nodos
        public int count=1;

        public static Nodo padre;
        public static int syntacticErrors = 0;
        public static ArrayList errores = new ArrayList(); 

        public String token_name_from_id(int id){
                //por medio de SYM.JAVA
                switch(id){
                case 0: return "EOF";
                case 1: return "error";
                case 2: return "BOOL";
                case 3: return "LETTERS";
                case 4: return "INTEGER";
                case 5: return "NOTHING";
                case 6: return "ID";
                case 7: return "LPAR";
                case 8: return "RPAR";
                case 9: return "LSBRACKET";
                case 10: return "RSBRACKET";
                case 11: return "LCBRACKET";
                case 12: return "RCBRACKET";
                case 13: return "COLON";
                case 14: return "ASSIGNMENT";
                case 15: return "SEMICOLON";
                case 16: return "COMMA";
                case 17: return "OPREL";
                case 18: return "OPSUMA";
                case 19: return "OPMULT";
                case 20: return "OPRES";
                case 21: return "VECTOR";
                case 22: return "CASE";
                case 23: return "IF";
                case 24: return "WHILE";
                case 25: return "LOOP";
                case 26: return "ELSIF";
                case 27: return "ELSE";
                case 28: return "FUNC";
                case 29: return "PIPE";
                case 30: return "SCAN";
                case 31: return "SOUT";
                case 32: return "SOUTLN";
                case 33: return "BREAK";
                case 34: return "DEFAULT";
                case 35: return "SWITCH";
                case 36: return "INT";
                case 37: return "DEF";
                case 38: return "FAKER";
                case 39: return "PAYBACK";
                case 40: return "EACH";
                case 41: return "INIT";
                case 42: return "NOT";
                case 43: return "CHAR";
                default: return "N/A";
                }
        }

        public void syntax_error(Symbol s){
                report_error("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n", null);
                errores.add(("Error sintáctico. No se esperaba el siguiente token: <" + s.value + ">. Línea: " + (s.right + 1) + ", Columna: " + (s.left + 1) + 	"\n"));
                syntacticErrors++;

                List expected = expected_token_ids();
                if (expected.size() != 0) {
                        int id;
                        System.out.println("Se esperaba...");
                        for (int i = 0; i < expected.size(); i++) {
            	                id = (int) expected.get(i);
            	                if (i == expected.size() - 1) {
            		                System.out.println(token_name_from_id(id));
            	                } else {
            		                System.out.print(token_name_from_id(id) + " | ");
            	                }
                        }
                }       

        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= INIT LPAR RPAR LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int initProgleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int initProgright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object initProg = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int leftParleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int leftParright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object leftPar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int rightParleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rightParright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object rightPar = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int left_cbracketleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int left_cbracketright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object left_cbracket = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int mainbodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mainbodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object mainbody = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int right_cbracketleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int right_cbracketright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object right_cbracket = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INITIALIZE");
                nodo.setID(parser.count);
                nodo.setValor(initProg.toString());
                parser.count++;

                //Terminal init
                /*
                Nodo initProgn = new Nodo();
                initProgn.setEtiqueta("INITIAL");
                initProgn.setID(parser.count);
                initProgn.setValor(initProg.toString());
                parser.count++;
                //initp.setValor(id);

                nodo.addHijos(initProgn);
                */
                
                //Terminal leftPar
               // Nodo leftParn = new Nodo();
                //leftParn.setEtiqueta("Left Parenthesis");
                //leftParn.setID(parser.count);
                //leftParn.setValor(leftPar.toString());
                //parser.count++;

                //nodo.addHijos(leftParn);

                //Terminal rightPar
                //Nodo rightParn = new Nodo();
                //rightParn.setEtiqueta("Right Parenthesis");
                //rightParn.setID(parser.count);
                //rightParn.setValor(")");
                //parser.count++;

                //nodo.addHijos(rightParn);

                //Terminal left C bracket
                //Nodo left_cbracketn = new Nodo();
                //left_cbracketn.setEtiqueta("Left C Bracket");
                //left_cbracketn.setID(parser.count);
                //left_cbracketn.setValor("{");
                //parser.count++;
                //nodo.addHijos(left_cbracketn);

                //Non terminal body
                nodo.addHijos((Nodo) mainbody);

                //Terminal Right C Bracket
                //Nodo right_cbracketn = new Nodo();
                //right_cbracketn.setEtiqueta("Right C Bracket");
                //right_cbracketn.setID(parser.count);
                //right_cbracketn.setValor("}");
                //parser.count++;
                //nodo.addHijos(right_cbracketn);

                parser.padre = nodo;

                RESULT = nodo;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Object RESULT =null;
		
                System.out.println("Foolishness, como no pudiste crear bien el inicio, Dante?");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= DEF tipo lista_ID SEMICOLON 
            {
              Object RESULT =null;
		int typeVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object typeV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lista_IDsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lista_IDsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lista_IDs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo declaraciones = new Nodo();
                declaraciones.setEtiqueta("Declaracion");
                declaraciones.setID(parser.count);
                parser.count++;

                declaraciones.addHijos((Nodo) typeV);
                declaraciones.addHijos((Nodo)lista_IDs);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                declaraciones.addHijos(semicolonN);
                //parser.padre = declaraciones;

                RESULT = declaraciones;

                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= proposition body 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                
                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                //Nodo props = new Nodo();
                //props.setEtiqueta("proposition");
                //props.setID(parser.count);
                //props.setValor(prop.toString());
                //parser.count++;

                bodyn.addHijos((Nodo) prop);
                if(bod!=null){
                        bodyn.addHijos(((Nodo) bod).getHijos());
                }
                //bodyn.addHijos((Nodo) bod );

                //parser.padre = bodyn;

                RESULT = bodyn;
                


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= functions body 
            {
              Object RESULT =null;
		int funcsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funcsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funcs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                bodyn.addHijos((Nodo) funcs);
                if(bod!=null){
                        bodyn.addHijos(((Nodo) bod).getHijos());
                }
                RESULT = bodyn;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= 
            {
              Object RESULT =null;
		

                
                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("null");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                
                RESULT = bodyn;
                
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bodyF ::= propositionF bodyF 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		

                Nodo bodyn = new Nodo();
                bodyn.setEtiqueta("Body");
                bodyn.setID(parser.count);
                bodyn.setValor("Body constr");
                parser.count++;

                //Nodo props = new Nodo();
                //props.setEtiqueta("proposition");
                //props.setID(parser.count);
                //props.setValor(prop.toString());
                //parser.count++;

                bodyn.addHijos((Nodo) prop);
                if(bod!=null){
                        bodyn.addHijos(((Nodo) bod).getHijos());
                }
                //bodyn.addHijos((Nodo) bod );

                //parser.padre = bodyn;

                RESULT = bodyn;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyF",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bodyF ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyF",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proposition ::= WHILE expression LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo whileN = new Nodo();
                whileN.setEtiqueta("While");
                whileN.setID(parser.count);
                parser.count++;

                whileN.addHijos((Nodo) ex);
                whileN.addHijos((Nodo) bod);

                RESULT = whileN;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proposition ::= funcCall SEMICOLON 
            {
              Object RESULT =null;
		int funCleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funCright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funC = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT = funC;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proposition ::= forLoop 
            {
              Object RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object forl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = forl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proposition ::= ifStatement 
            {
              Object RESULT =null;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ifS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = ifS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proposition ::= switchCase 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = sc;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proposition ::= declaraciones 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo proposition = new Nodo();
                //proposition.setID(parser.count++);
                //proposition.setEtiqueta("propositionDecl");
                //parser.count++;

                //proposition.addHijos((Nodo) decl);

                //parser.padre = proposition;
                RESULT = decl;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= declaracionSimple 
            {
              Object RESULT =null;
		int declSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object declS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               /*
                Nodo proposition = new Nodo();
                proposition.setID(parser.count);
                proposition.setEtiqueta("propositionDeclSimple");
                parser.count++;

                proposition.addHijos((Nodo)declS);
                parser.padre = proposition;
                */
                RESULT = declS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= imprimir 
            {
              Object RESULT =null;
		int printerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int printerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object printer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo printing = new Nodo();
                //printing.setID(parser.count);
                //printing.setEtiqueta("Printer");
                //printing.setValor(":=");
                //parser.count++;

                //printing.addHijos((Nodo) printer);
                //parser.padre = printing;
                RESULT = printer;


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= scanear 
            {
              Object RESULT =null;
		int scanleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scanright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object scan = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = scan;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= ID ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                //System.out.println("ID a asignacion");
                Nodo asignacionID = new Nodo();
                asignacionID.setEtiqueta("asignacion a valor");
                asignacionID.setID(parser.count);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                asignacionID.addHijos(idData);

                asignacionID.addHijos((Nodo) ex);

                RESULT = asignacionID;

        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= tipoVS 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = vs;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= error 
            {
              Object RESULT =null;
		
                System.err.println("Falla de segmento, error en creacion de proposition");        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propositionF ::= WHILE expression LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo whileN = new Nodo();
                whileN.setEtiqueta("While");
                whileN.setID(parser.count);
                parser.count++;

                whileN.addHijos((Nodo) ex);
                whileN.addHijos((Nodo) bod);

                RESULT = whileN;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propositionF ::= funcCall SEMICOLON 
            {
              Object RESULT =null;
		int funCleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funCright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funC = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT = funC;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propositionF ::= forLoop 
            {
              Object RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object forl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = forl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // propositionF ::= ifStatement 
            {
              Object RESULT =null;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ifS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = ifS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // propositionF ::= switchCase 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = sc;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // propositionF ::= declaraciones 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo proposition = new Nodo();
                //proposition.setID(parser.count++);
                //proposition.setEtiqueta("propositionDecl");
                //parser.count++;

                //proposition.addHijos((Nodo) decl);

                //parser.padre = proposition;
                RESULT = decl;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // propositionF ::= declaracionSimple 
            {
              Object RESULT =null;
		int declSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int declSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object declS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               /*
                Nodo proposition = new Nodo();
                proposition.setID(parser.count);
                proposition.setEtiqueta("propositionDeclSimple");
                parser.count++;

                proposition.addHijos((Nodo)declS);
                parser.padre = proposition;
                */
                RESULT = declS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // propositionF ::= imprimir 
            {
              Object RESULT =null;
		int printerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int printerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object printer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                //Nodo printing = new Nodo();
                //printing.setID(parser.count);
                //printing.setEtiqueta("Printer");
                //printing.setValor(":=");
                //parser.count++;

                //printing.addHijos((Nodo) printer);
                //parser.padre = printing;
                RESULT = printer;


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // propositionF ::= scanear 
            {
              Object RESULT =null;
		int scanleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int scanright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object scan = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = scan;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // propositionF ::= ID ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignacionID = new Nodo();
                asignacionID.setEtiqueta("asignacion a valor");
                asignacionID.setID(parser.count);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                asignacionID.addHijos(idData);

                asignacionID.addHijos((Nodo) ex);

                RESULT = asignacionID;

        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // propositionF ::= PAYBACK retValsF 
            {
              Object RESULT =null;
		int rvfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rvfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object rvf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=rvf;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // propositionF ::= tipoVS 
            {
              Object RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=vec;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // propositionF ::= error 
            {
              Object RESULT =null;
		
                System.err.println("Falla de segmento, error en creacion de proposition");   
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionF",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcCall ::= ID LPAR params RPAR 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo funCaller = new Nodo();
                funCaller.setEtiqueta("Func call");
                funCaller.setID(parser.count);
                funCaller.setValor(idP.toString());
                parser.count++;

                funCaller.addHijos((Nodo) pr);

                RESULT = funCaller;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funcCall",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // imprimir ::= SOUT LPAR ID RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int lPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int lPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object lP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object rP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion");
                impresion.setID(parser.count);
                impresion.setValor("printer");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out");
                souter.setID(parser.count);
                souter.setValor(st.toString());

                impresion.addHijos(souter);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                impresion.addHijos(idData);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // imprimir ::= SOUTLN LPAR ID RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion con Salto de linea");
                impresion.setID(parser.count);
                impresion.setValor("printerLN");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out ln");
                souter.setID(parser.count);
                souter.setValor(stl.toString());

                impresion.addHijos(souter);
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                impresion.addHijos(idData);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;

        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // imprimir ::= SOUT LPAR values RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		

                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion");
                impresion.setID(parser.count);
                impresion.setValor("printer");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out");
                souter.setID(parser.count);
                souter.setValor(st.toString());

                impresion.addHijos(souter);
                parser.count++;

                impresion.addHijos((Nodo) vals);

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;
        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // imprimir ::= SOUTLN LPAR values RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo impresion = new Nodo();
                impresion.setEtiqueta("Impresion con Salto de linea");
                impresion.setID(parser.count);
                impresion.setValor("printerLN");

                parser.count++;

                Nodo souter = new Nodo();
                souter.setEtiqueta("system out ln");
                souter.setID(parser.count);
                souter.setValor(stl.toString());

                impresion.addHijos(souter);
                parser.count++;

                impresion.addHijos((Nodo) vals);


                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;
                
                impresion.addHijos(semicolonN);

                RESULT = impresion;
        
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // forLoop ::= LOOP LSBRACKET body RSBRACKET EACH LPAR ID RPAR 
            {
              Object RESULT =null;
		int looperleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int looperright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object looper = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int propsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int propsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object props = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int eachWleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eachWright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object eachW = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		

                Nodo loopN = new Nodo();
                loopN.setEtiqueta("For loop");
                loopN.setID(parser.count);
                loopN.setValor(looper.toString());
                parser.count++;

                loopN.addHijos((Nodo)props);

                Nodo eachP = new Nodo();
                eachP.setEtiqueta("Each id");
                eachP.setID(parser.count);
                eachP.setValor(eachW.toString());

                parser.count++;

                loopN.addHijos(eachP);

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                loopN.addHijos(idData);

                RESULT = loopN;



              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forLoop",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionSimple ::= DEF tipo ID decl_v_e 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo DeclSimple = new Nodo();
                DeclSimple.setEtiqueta("Decl Simple");
                DeclSimple.setID(parser.count);
                DeclSimple.setValor("Declaracion simple");
                parser.count++;

                Nodo definer = new Nodo();
                definer.setEtiqueta("def");
                definer.setID(parser.count);
                definer.setValor("DEF");
                parser.count++;

                DeclSimple.addHijos(definer);
                DeclSimple.addHijos((Nodo) type);
                
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                DeclSimple.addHijos(idData);
                DeclSimple.addHijos((Nodo) dv);

                //parser.padre = DeclSimple;

                RESULT = DeclSimple;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionSimple",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionSimple ::= error SEMICOLON 
            {
              Object RESULT =null;
		
                System.err.println("Declaration Fault");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracionSimple",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // functions ::= FUNC tipo ID LPAR params RPAR LCBRACKET bodyF RCBRACKET 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo funcT = new Nodo();
                funcT.setEtiqueta("Function");
                funcT.setID(parser.count);
                funcT.setValor(idP.toString());

                parser.count++;
                funcT.addHijos((Nodo)type);
                funcT.addHijos((Nodo)pr);
                funcT.addHijos((Nodo)bod);

                RESULT= funcT;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functions",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // retValsF ::= values SEMICOLON 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT= vals;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // retValsF ::= funcCall SEMICOLON 
            {
              Object RESULT =null;
		int funClleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int funClright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object funCl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT= funCl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // retValsF ::= ID SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                RESULT = idData;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // retValsF ::= error 
            {
              Object RESULT =null;
		
                System.err.println("Error, verificar el retorno de PAYBACK");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retValsF",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // params ::= tipo ID params 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                 Nodo paramsN = new Nodo();
                paramsN.setID(parser.count);
                paramsN.setEtiqueta("Parametros");
                paramsN.setValor(" ");

                parser.count++;
                paramsN.addHijos((Nodo) type);

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                paramsN.addHijos(idData);

                if(pL!=null){
                        paramsN.addHijos(((Nodo) pL).getHijos());
                }

                RESULT = paramsN;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // params ::= ID params 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo paramsN = new Nodo();
                paramsN.setID(parser.count);
                paramsN.setEtiqueta("Parametros");
                paramsN.setValor(" ");
                parser.count++;
        
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                if(pL!=null){
                        paramsN.addHijos(((Nodo) pL).getHijos());
                }

                RESULT = paramsN;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // params ::= values params 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo paramsN = new Nodo();
                paramsN.setID(parser.count);
                paramsN.setEtiqueta("Parametros");
                paramsN.setValor(" ");
                parser.count++;

                paramsN.addHijos((Nodo) vals);

                if(pL!=null){
                        paramsN.addHijos(((Nodo) pL).getHijos());
                }

                RESULT = vals; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // params ::= COMMA params 
            {
              Object RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = pL;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // params ::= error 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // params ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // scanear ::= ID ASSIGNMENT SCAN LPAR tipo RPAR SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int scanPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int scanPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object scanP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int typeVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int typeVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object typeV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo scanear = new Nodo();
                scanear.setEtiqueta("Scanner");
                scanear.setID(parser.count);
                scanear.setValor("");

                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                scanear.addHijos(idData);

                Nodo scanerW = new Nodo();
                scanerW.setEtiqueta("scaner");
                scanerW.setID(parser.count);
                scanerW.setValor(scanP.toString());
                parser.count++;

                scanear.addHijos(scanerW);

                scanear.addHijos((Nodo)typeV);

                RESULT = scanear;
                

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("scanear",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista_ID ::= ID lista_ID 
            {
              Object RESULT =null;
		

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_ID",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_ID ::= COMMA lista_ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_ID",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_ID ::= empty 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_ID",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decl_v_e ::= SEMICOLON 
            {
              Object RESULT =null;
		
                Nodo declV = new Nodo();
                declV.setEtiqueta("decl Val");
                declV.setID(parser.count);
                declV.setValor("D V");
                parser.count++;

                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                declV.addHijos( semicolonN );

                //parser.padre = declV;

                RESULT = declV;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_v_e",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decl_v_e ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo asigner = new Nodo();
                asigner.setEtiqueta("Asignacion");
                asigner.setID(parser.count);
                asigner.setValor("=");
                parser.count++;

                asigner.addHijos((Nodo) asign);

                RESULT = asigner;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_v_e",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // decl_v_e ::= error 
            {
              Object RESULT =null;
		
                //System.out.println("Falla en declaracion asignable/empty");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_v_e",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion ::= ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignado = new Nodo();
                asignado.setEtiqueta("Assignment con value");
                asignado.setID(parser.count);
                asignado.setValor("=");
                parser.count++;
                /*
                Nodo asigner = new Nodo();
                asigner.setEtiqueta("ASSIGNMENT");
                asigner.setID(parser.count);
                asigner.setValor(as.toString());
                parser.count++;
                
                asignado.addHijos(asigner);
                */
                asignado.addHijos((Nodo) vals);

                /*
                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                asignado.addHijos(semicolonN);
                //parser.padre = asignado;
                */
                RESULT = asignado;



        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion ::= ASSIGNMENT NOTHING SEMICOLON 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nhleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nhright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nh = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo asignado = new Nodo();
                asignado.setEtiqueta("Assignment void");
                asignado.setID(parser.count);
                asignado.setValor("void");
                parser.count++;

                /*
                Nodo asigner = new Nodo();
                asigner.setEtiqueta("ASSIGNMENT");
                asigner.setID(parser.count);
                asigner.setValor(as.toString());
                parser.count++;

                asignado.addHijos(asigner);
                */

                /*
                Nodo voidV = new Nodo();
                voidV.setEtiqueta("Void");
                voidV.setID(parser.count);
                voidV.setValor(nh.toString());
                parser.count++;

                asignado.addHijos(voidV);
                */
                /*
                Nodo semicolonN = new Nodo();
                semicolonN.setEtiqueta("semicolon");
                semicolonN.setID(parser.count);
                semicolonN.setValor(";");
                parser.count++;

                asignado.addHijos(semicolonN);
                */
                RESULT = asignado;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= INT 
            {
              Object RESULT =null;
		
                Nodo declI = new Nodo();
                declI.setEtiqueta("Integer");
                declI.setID(parser.count);
                declI.setValor("INT");
                parser.count++;  

                RESULT = declI;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo ::= FAKER 
            {
              Object RESULT =null;
		
                Nodo declF = new Nodo();
                declF.setEtiqueta("boolean");
                declF.setID(parser.count);
                declF.setValor("FAKER");
                parser.count++;  

                RESULT = declF;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo ::= CHAR 
            {
              Object RESULT =null;
		
                Nodo declC = new Nodo();
                declC.setEtiqueta("character");
                declC.setID(parser.count);
                declC.setValor("CHAR");
                parser.count++;  

                RESULT = declC;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= error 
            {
              Object RESULT =null;
		
                //System.err.println("Falla en los valores");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // caseTypes ::= LETTERS 
            {
              Object RESULT =null;
		int lChleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lChright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lCh = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo letterChar = new Nodo();
                letterChar.setEtiqueta("val Char");
                letterChar.setID(parser.count);
                letterChar.setValor(lCh.toString());
                parser.count++;

                RESULT = letterChar;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caseTypes",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // caseTypes ::= INTEGER 
            {
              Object RESULT =null;
		int intVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int intVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object intV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo intVal = new Nodo();
                intVal.setEtiqueta("int val");
                intVal.setID(parser.count);
                intVal.setValor(intV.toString());
                parser.count++;

                RESULT = intVal;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caseTypes",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // caseTypes ::= error 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caseTypes",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipoVS ::= DEF VECTOR ID ASSIGNMENT llamada_valores SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int valCallleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valCallright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object valCall = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo vectorDecl = new Nodo();
                vectorDecl.setEtiqueta("Vector");
                vectorDecl.setID(parser.count);
                vectorDecl.setValor(idP.toString());
                parser.count++;

                vectorDecl.addHijos((Nodo) valCall);
                
                RESULT = vectorDecl;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipoVS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipoVS ::= DEF VECTOR ID SEMICOLON 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo vectorDecl = new Nodo();
                vectorDecl.setEtiqueta("Vector vacio");
                vectorDecl.setID(parser.count);
                vectorDecl.setValor(idP.toString());
                parser.count++; 

                RESULT = vectorDecl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipoVS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamada_valores ::= LSBRACKET lista_valores RSBRACKET 
            {
              Object RESULT =null;
		int vlsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vlsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object vls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
       
                RESULT = vls;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamada_valores",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_valores ::= vectorData COMMA lista_valores 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int vlsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vlsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		

                
                Nodo data = new Nodo();
                data.setEtiqueta("Dato vector");
                data.setID(parser.count);
                parser.count++;
                data.addHijos((Nodo) dp);

                if(vls!=null){
                        data.addHijos(((Nodo) vls).getHijos());
                }
                
                RESULT = data;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_valores ::= vectorData 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo data = new Nodo();
                data.setEtiqueta("Dato vector");
                data.setID(parser.count);
                parser.count++;
                data.addHijos((Nodo)dp);
                RESULT = data;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_valores ::= llamada_valores COMMA llamada_valores 
            {
              Object RESULT =null;
		int lvsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int lvsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object lvs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvs1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvs1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lvs1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo data = new Nodo();
                data.setEtiqueta("2d vector datos");
                data.setID(parser.count);
                parser.count++;
                data.addHijos((Nodo)lvs);
                data.addHijos((Nodo)lvs1);
                RESULT = data;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vectorData ::= values 
            {
              Object RESULT =null;
		int vlsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vlsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vls = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT= vls;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("vectorData",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vectorData ::= ID 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID ");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;
                RESULT =idData;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("vectorData",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // values ::= BOOL 
            {
              Object RESULT =null;
		int booleanVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int booleanVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object booleanV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo boolFaker = new Nodo();
                boolFaker.setEtiqueta("val Faker");
                boolFaker.setID(parser.count);
                boolFaker.setValor(booleanV.toString());
                parser.count++;

                RESULT = boolFaker;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // values ::= LETTERS 
            {
              Object RESULT =null;
		int lChleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lChright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lCh = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo letterChar = new Nodo();
                letterChar.setEtiqueta("val Char");
                letterChar.setID(parser.count);
                letterChar.setValor(lCh.toString());
                parser.count++;

                RESULT = letterChar;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // values ::= INTEGER 
            {
              Object RESULT =null;
		int intVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int intVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object intV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo intVal = new Nodo();
                intVal.setEtiqueta("int val");
                intVal.setID(parser.count);
                intVal.setValor(intV.toString());
                parser.count++;

                RESULT = intVal;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifStatement ::= IF expression LCBRACKET body RCBRACKET elsiffer 
            {
              Object RESULT =null;
		int iferWleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int iferWright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object iferW = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo ifState = new Nodo();
                ifState.setID(parser.count);
                ifState.setEtiqueta("if State");
                parser.count++;

                Nodo ifer = new Nodo();
                ifer.setID(parser.count);
                ifer.setEtiqueta("if w");
                ifer.setValor(iferW.toString());
                parser.count++;

                ifState.addHijos(ifer);
                ifState.addHijos((Nodo) ex);
                ifState.addHijos((Nodo) prop);
                if(elsif!=null){
                        ifState.addHijos((Nodo) elsif);
                }

                RESULT = ifState;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elsiffer ::= ELSIF expression LCBRACKET body RCBRACKET elsiffer 
            {
              Object RESULT =null;
		int elsiferleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int elsiferright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object elsifer = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elseRleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elseRright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object elseR = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo elsifCase = new Nodo();
                elsifCase.setEtiqueta("Else if");
                elsifCase.setID(parser.count);
                elsifCase.setValor(elsifer.toString());
                parser.count++;

                elsifCase.addHijos((Nodo) ex);
                elsifCase.addHijos((Nodo) prop);

                //if(elseR!=null){
                //        elsifCase.addHijos(((Nodo) elseR).getHijos());
                //}
                elsifCase.addHijos((Nodo) elseR);
                RESULT = elsifCase;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elsiffer",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elsiffer ::= ELSE LCBRACKET body RCBRACKET 
            {
              Object RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object prop = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo elseFinal = new Nodo();
                elseFinal.setEtiqueta("Else final");
                elseFinal.setID(parser.count);
                elseFinal.setValor("ELSE");
                parser.count++;

                elseFinal.addHijos((Nodo) prop);

                RESULT = elseFinal;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elsiffer",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elsiffer ::= 
            {
              Object RESULT =null;
		
                 
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elsiffer",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switchCase ::= SWITCH LPAR ID RPAR LCBRACKET cases RCBRACKET 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                Nodo switcher = new Nodo();
                switcher.setID(parser.count);
                switcher.setEtiqueta("switch case");
                switcher.setValor("SWITCH");
                parser.count++;

                Nodo idData = new Nodo();
                idData.setEtiqueta("ID Base");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                switcher.addHijos(idData);
                //if(cs!=null){
                //        switcher.addHijos(((Nodo) cs).getHijos());
                //}
                switcher.addHijos((Nodo)cs);


                RESULT = switcher;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switchCase",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cases ::= CASE caseTypes COLON body BREAK SEMICOLON cases 
            {
              Object RESULT =null;
		int cTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int cTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object cT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int csRleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int csRright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object csR = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo caseX = new Nodo();
                caseX.setEtiqueta("Cases");
                caseX.setID(parser.count);
                caseX.setValor(" ");
                parser.count++;
                
                Nodo casoL = new Nodo();
                casoL.setEtiqueta("Case");
                casoL.setID(parser.count);
                casoL.setValor(" ");
                parser.count++;

                casoL.addHijos((Nodo) cT);
                casoL.addHijos((Nodo)bod);
                caseX.addHijos(casoL);
                

                if(csR!=null){
                        caseX.addHijos(((Nodo) csR).getHijos());
                }
                //caseX.addHijos((Nodo)csR);
                RESULT = caseX;


        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cases ::= DEFAULT COLON body BREAK SEMICOLON 
            {
              Object RESULT =null;
		int defltleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int defltright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object deflt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object bod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                Nodo caseRet = new Nodo();
                caseRet.setEtiqueta("Ret default");
                caseRet.setID(parser.count);
                parser.count++;

                Nodo caseX = new Nodo();
                caseX.setEtiqueta("Case DEFAULT");
                caseX.setID(parser.count);
                caseX.setValor(deflt.toString());


                parser.count++;

                caseX.addHijos((Nodo) bod);

                caseRet.addHijos(caseX);
                RESULT = caseRet;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expresion_simple 
            {
              Object RESULT =null;
		int exSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = exS;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expresion_simple OPREL expresion_simple 
            {
              Object RESULT =null;
		int exSLleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exSLright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exSL = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exSRleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exSRright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object exSR = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo exprOprel = new Nodo ();
                exprOprel.setEtiqueta("Expr con oprel");
                exprOprel.setID(parser.count);
                parser.count++;

                exprOprel.addHijos((Nodo) exSL);

                Nodo oprelN = new Nodo();
                oprelN.setEtiqueta("op relacional");
                oprelN.setID(parser.count);
                oprelN.setValor(opr.toString());

                parser.count++;

                exprOprel.addHijos((Nodo) exSR);

                RESULT = exprOprel;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= COLON funcCall 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=fc;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= llamada_valores 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT =vl;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= error 
            {
              Object RESULT =null;
		
                System.out.println("Error en declaracion de expresiones");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_simple ::= termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = term;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_simple ::= signo termino 
            {
              Object RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo signTERM = new Nodo();
                signTERM.setID(parser.count);
                signTERM.setEtiqueta("termino con signo");
                parser.count++;
                
                signTERM.addHijos((Nodo) sig);
                signTERM.addHijos((Nodo) term);

                RESULT = signTERM;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_simple ::= expresion_simple OPSUMA termino 
            {
              Object RESULT =null;
		int exSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opSleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opSright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object opS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo exTERM = new Nodo();
                exTERM.setID(parser.count);
                exTERM.setEtiqueta("expr suma termino");
                parser.count++;

                exTERM.addHijos((Nodo) exS);
                Nodo simbolo = new Nodo();
                simbolo.setID(parser.count);
                simbolo.setEtiqueta("Operador de suma");
                simbolo.setValor(opS.toString());
                exTERM.addHijos((Nodo) term);

                RESULT = exTERM;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino ::= factor 
            {
              Object RESULT =null;
		int factorXleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int factorXright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object factorX = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = factorX;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino ::= termino OPMULT factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opMleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opMright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object opM = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo termFactor = new Nodo();
                termFactor.setID(parser.count);
                termFactor.setEtiqueta("Termino con factor");
                parser.count++;

                termFactor.addHijos((Nodo) term);
                Nodo simbolo = new Nodo();
                simbolo.setID(parser.count);
                simbolo.setEtiqueta("Operador de Mult");
                simbolo.setValor(opM.toString());
                parser.count++;

                termFactor.addHijos((Nodo) fac);

                RESULT = termFactor;
                
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= ID 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;

                RESULT = idData;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= ID LPAR lista_expresiones RPAR 
            {
              Object RESULT =null;
		int idPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object idP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                Nodo idData = new Nodo();
                idData.setEtiqueta("ID");
                idData.setID(parser.count);
                idData.setValor(idP.toString());
                parser.count++;
                RESULT = idData;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= values 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = vals;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= LPAR expression RPAR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                RESULT = ex;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo notF = new Nodo();
                notF.setEtiqueta("Not factor");
                notF.setID(parser.count);
                parser.count++;

                Nodo notW = new Nodo();
                notW.setEtiqueta("Not");
                notW.setID(parser.count);
                notW.setValor(nt.toString());
                parser.count++;

                notF.addHijos(notW);
                notF.addHijos((Nodo)fac);

                RESULT = notF;

        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // signo ::= OPSUMA 
            {
              Object RESULT =null;
		int opSumleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opSumright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object opSum = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo operador = new Nodo();
        operador.setEtiqueta("opSuma");
        operador.setID(parser.count);
        operador.setValor(opSum.toString());
        parser.count++;

        RESULT = operador;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_expresiones ::= expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = ex;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_expresiones ::= lista_expresiones COMMA expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT= ex;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
