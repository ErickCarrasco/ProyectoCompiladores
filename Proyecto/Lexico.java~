// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Erick C/Documents/UNITEC/Mod4_A2020_Compiladores1/ProyectoCompiladores/Proyecto/LexicoProyecto.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\0\1\1\22\0\1\2\4\0\1\3"+
    "\2\0\1\4\1\5\2\3\1\0\1\6\1\0\1\3"+
    "\2\7\10\10\1\0\1\11\1\12\1\13\1\14\2\0"+
    "\25\15\1\16\4\15\4\0\1\17\1\0\1\20\1\15"+
    "\1\21\1\22\1\23\1\24\1\15\1\25\1\26\1\15"+
    "\1\27\1\30\1\15\1\31\1\32\1\33\1\15\1\34"+
    "\1\35\1\36\1\37\5\15\1\40\1\41\1\42\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\47\0\1\2\24\0\1\2\6\0\1\3"+
    "\20\0\1\4\3\0\1\5\33\0\1\6\37\0\1\7"+
    "\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325"+
    "\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d"+
    "\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555"+
    "\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0253\0\u0604\0\u0627\0\u064a"+
    "\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762"+
    "\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a"+
    "\0\u089d\0\43\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f"+
    "\0\43\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64"+
    "\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c"+
    "\0\u0b9f\0\43\0\u0bc2\0\u0be5\0\u0c08\0\43\0\u0c2b\0\u0c4e"+
    "\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66"+
    "\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e"+
    "\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96"+
    "\0\u0fb9\0\43\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b"+
    "\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3"+
    "\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb"+
    "\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3"+
    "\0\u13f6\0\43\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8"+
    "\0\u14eb\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0"+
    "\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8"+
    "\0\u171b\0\u173e\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810"+
    "\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\22\2\1\3\3\2\1\4\1\2\1\5\12\2\66\0"+
    "\1\6\43\0\1\7\50\0\1\10\34\0\1\11\22\0"+
    "\1\12\70\0\1\13\11\0\2\14\41\0\2\12\12\0"+
    "\2\15\1\0\20\15\36\0\1\16\10\0\2\14\13\0"+
    "\1\17\5\0\1\20\1\0\1\21\14\0\1\22\1\23"+
    "\1\24\1\25\1\22\1\26\3\27\1\22\1\30\1\31"+
    "\1\30\2\15\1\27\20\15\3\22\40\0\1\32\25\0"+
    "\1\33\37\0\1\34\53\0\1\35\11\0\13\22\1\36"+
    "\30\22\2\23\2\22\1\26\4\22\1\30\1\31\1\30"+
    "\27\22\2\23\2\22\1\26\4\22\1\30\1\31\1\30"+
    "\2\37\1\22\20\37\16\22\1\36\1\22\2\37\1\22"+
    "\20\37\16\22\1\36\24\22\1\40\3\22\1\23\1\24"+
    "\1\25\1\22\1\26\3\27\1\22\1\30\1\31\1\30"+
    "\2\22\1\27\24\22\2\30\10\22\1\36\1\22\2\41"+
    "\1\22\20\41\3\22\1\0\2\36\10\0\1\42\1\0"+
    "\2\43\1\0\20\43\4\0\2\44\12\0\2\45\1\0"+
    "\20\45\24\0\1\46\50\0\1\47\51\0\1\50\5\0"+
    "\2\36\12\0\2\43\1\0\20\43\3\0\6\22\3\51"+
    "\1\22\1\52\1\53\1\52\2\37\1\51\20\37\4\22"+
    "\2\40\10\22\1\36\6\22\1\54\17\22\1\55\1\22"+
    "\2\56\2\22\1\26\3\57\2\22\1\36\1\22\2\41"+
    "\1\57\20\41\3\22\13\0\1\36\30\0\2\60\2\0"+
    "\1\61\3\62\4\0\2\43\1\62\20\43\4\0\2\44"+
    "\12\0\2\45\1\0\20\45\2\0\1\63\1\0\2\64"+
    "\12\0\2\45\1\0\20\45\41\0\1\65\27\0\1\66"+
    "\20\0\2\67\40\0\6\22\3\51\1\22\1\52\1\53"+
    "\1\52\2\22\1\51\36\22\1\36\1\22\2\41\1\22"+
    "\20\41\3\22\1\0\2\36\10\0\1\70\1\0\2\43"+
    "\1\0\20\43\3\0\13\22\1\36\7\22\1\71\20\22"+
    "\2\56\2\22\1\26\5\22\1\36\30\22\2\56\2\22"+
    "\1\26\3\57\2\22\1\36\3\22\1\57\23\22\1\0"+
    "\2\60\2\0\1\61\75\0\1\72\3\0\2\60\2\0"+
    "\1\61\3\62\6\0\1\62\46\0\1\73\20\0\2\64"+
    "\37\0\1\63\32\0\1\74\44\0\1\75\7\0\2\67"+
    "\12\0\2\76\1\0\20\76\16\0\1\77\27\0\13\22"+
    "\1\36\10\22\1\100\16\22\1\0\2\72\17\0\1\101"+
    "\17\0\1\102\20\0\1\103\56\0\1\104\7\0\2\105"+
    "\41\0\2\106\3\0\1\107\2\110\1\111\3\0\2\76"+
    "\1\110\20\76\20\0\2\43\1\0\20\43\3\0\1\22"+
    "\2\112\10\22\1\36\27\22\23\0\1\113\40\0\1\114"+
    "\22\0\2\115\12\0\2\116\1\0\20\116\4\0\2\105"+
    "\12\0\2\117\1\0\20\117\4\0\2\106\3\0\1\120"+
    "\2\0\1\111\32\0\2\106\3\0\1\107\2\110\1\111"+
    "\2\0\1\121\2\0\1\110\24\0\2\106\3\0\1\107"+
    "\2\110\1\111\5\0\1\110\23\0\1\22\2\112\10\22"+
    "\1\36\10\22\1\122\1\22\1\123\14\22\24\0\1\124"+
    "\43\0\1\125\16\0\2\115\12\0\2\116\1\0\20\116"+
    "\1\0\1\126\2\0\2\127\3\0\1\130\2\131\1\132"+
    "\3\0\2\116\1\131\20\116\4\0\2\133\3\0\1\134"+
    "\2\135\1\136\3\0\2\117\1\135\20\117\17\0\1\121"+
    "\27\0\2\121\4\0\2\137\32\0\13\22\1\36\4\22"+
    "\1\140\35\22\1\36\15\22\1\141\11\22\1\0\2\142"+
    "\44\0\1\143\57\0\1\144\4\0\1\145\15\0\2\127"+
    "\3\0\1\146\2\0\1\132\32\0\2\127\3\0\1\130"+
    "\2\131\1\132\2\0\1\147\2\0\1\131\24\0\2\127"+
    "\3\0\1\130\2\131\1\132\5\0\1\131\24\0\2\133"+
    "\3\0\1\150\2\0\1\136\32\0\2\133\3\0\1\134"+
    "\2\135\1\136\2\0\1\151\2\0\1\135\24\0\2\133"+
    "\3\0\1\134\2\135\1\136\5\0\1\135\24\0\2\152"+
    "\4\0\2\137\1\111\31\0\13\22\1\36\13\22\1\153"+
    "\26\22\1\36\22\22\1\154\4\22\1\0\2\142\21\0"+
    "\1\155\1\0\1\156\23\0\2\157\57\0\1\160\46\0"+
    "\1\161\25\0\1\147\27\0\2\147\35\0\1\162\16\0"+
    "\1\151\27\0\2\151\4\0\1\163\14\0\1\164\11\0"+
    "\1\165\5\0\2\152\6\0\1\111\31\0\13\22\1\36"+
    "\7\22\1\166\20\22\2\167\10\22\1\36\27\22\20\0"+
    "\1\170\53\0\1\171\16\0\1\172\55\0\1\173\60\0"+
    "\1\174\44\0\1\175\1\0\1\132\1\0\2\163\6\0"+
    "\1\136\51\0\1\176\56\0\1\177\6\0\13\22\1\36"+
    "\20\22\1\200\7\22\2\167\10\22\1\36\1\22\2\201"+
    "\1\22\20\201\3\22\27\0\1\202\51\0\1\203\40\0"+
    "\1\174\47\0\1\204\10\0\2\205\4\0\2\206\1\0"+
    "\20\206\33\0\1\207\51\0\1\210\3\0\1\22\2\211"+
    "\10\22\1\36\30\22\2\212\3\22\1\213\2\214\1\215"+
    "\1\22\1\36\1\22\2\201\1\214\20\201\3\22\23\0"+
    "\1\216\20\0\2\217\41\0\2\204\12\0\2\220\1\0"+
    "\20\220\45\0\1\162\6\0\3\221\4\0\2\206\1\221"+
    "\20\206\2\0\1\162\35\0\1\210\30\0\1\163\17\0"+
    "\1\22\2\211\10\22\1\36\1\22\2\222\1\22\20\222"+
    "\4\22\2\212\3\22\1\223\2\22\1\215\1\22\1\36"+
    "\30\22\2\212\3\22\1\213\2\214\1\215\1\22\1\36"+
    "\1\224\2\22\1\214\24\22\2\212\3\22\1\213\2\214"+
    "\1\215\1\22\1\36\3\22\1\214\24\22\2\225\10\22"+
    "\1\36\6\22\1\54\17\22\1\55\34\0\1\226\7\0"+
    "\2\217\12\0\2\227\1\0\20\227\4\0\2\230\3\0"+
    "\3\231\1\232\3\0\2\220\1\231\20\220\11\0\3\221"+
    "\6\0\1\221\22\0\1\162\1\22\2\233\3\22\1\234"+
    "\2\235\1\215\1\22\1\36\1\22\2\222\1\235\20\222"+
    "\16\22\1\36\1\224\27\22\2\224\4\22\2\236\2\22"+
    "\1\36\30\22\2\225\10\22\1\36\26\22\1\55\1\0"+
    "\2\237\41\0\2\240\3\0\1\241\2\242\1\243\3\0"+
    "\2\227\1\242\20\227\4\0\2\230\6\0\1\232\32\0"+
    "\2\230\3\0\3\231\1\232\5\0\1\231\23\0\1\22"+
    "\2\233\3\22\1\244\2\22\1\215\1\22\1\36\30\22"+
    "\2\233\3\22\1\234\2\235\1\215\1\22\1\36\1\245"+
    "\2\22\1\235\24\22\2\233\3\22\1\234\2\235\1\215"+
    "\1\22\1\36\3\22\1\235\24\22\2\246\4\22\2\236"+
    "\1\215\1\22\1\36\27\22\1\0\2\237\12\0\2\247"+
    "\1\0\20\247\4\0\2\240\3\0\1\250\2\0\1\243"+
    "\32\0\2\240\3\0\1\241\2\242\1\243\2\0\1\251"+
    "\2\0\1\242\24\0\2\240\3\0\1\241\2\242\1\243"+
    "\5\0\1\242\24\0\2\252\17\0\1\101\17\0\1\102"+
    "\13\22\1\36\1\245\27\22\2\245\4\22\1\246\3\22"+
    "\1\36\10\22\1\253\11\22\1\254\5\22\2\246\6\22"+
    "\1\215\1\22\1\36\27\22\1\0\2\255\3\0\1\256"+
    "\2\257\1\243\3\0\2\247\1\257\20\247\17\0\1\251"+
    "\27\0\2\251\4\0\2\260\33\0\2\252\37\0\1\102"+
    "\13\22\1\36\4\22\1\261\35\22\1\36\20\22\1\262"+
    "\6\22\1\0\2\255\3\0\1\263\2\0\1\243\32\0"+
    "\2\255\3\0\1\256\2\257\1\243\2\0\1\264\2\0"+
    "\1\257\24\0\2\255\3\0\1\256\2\257\1\243\5\0"+
    "\1\257\24\0\2\265\4\0\2\260\1\243\31\0\13\22"+
    "\1\36\14\22\1\266\25\22\1\36\23\22\1\267\3\22"+
    "\14\0\1\264\27\0\2\264\4\0\1\265\14\0\1\270"+
    "\11\0\1\271\5\0\2\265\6\0\1\243\31\0\13\22"+
    "\1\36\21\22\1\267\20\22\1\36\7\22\1\246\17\22"+
    "\20\0\1\272\56\0\1\273\36\0\1\274\51\0\1\275"+
    "\40\0\1\275\30\0\1\265\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\47\0\1\1\24\0\1\11\6\0"+
    "\1\11\20\0\1\11\3\0\1\11\33\0\1\11\37\0"+
    "\1\11\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 8: break;
          case 2:
            { System.out.println("IF con OPREL");
            }
            // fall through
          case 9: break;
          case 3:
            { System.out.println("Encontro una declaracion Int");
            }
            // fall through
          case 10: break;
          case 4:
            { System.out.println("Encontro un vector sin tipado");
            }
            // fall through
          case 11: break;
          case 5:
            { System.out.println("Encontro una declaracion Char");
            }
            // fall through
          case 12: break;
          case 6:
            { System.out.println("Loop encontrado");
            }
            // fall through
          case 13: break;
          case 7:
            { System.out.println("Encontro un vector de una dimension");
            }
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
