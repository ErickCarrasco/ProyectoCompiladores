// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Erick C/Documents/UNITEC/Mod4_A2020_Compiladores1/ProyectoCompiladores/Proyecto/LexicoProyecto.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\0\1\1\22\0\1\2\4\0\1\3"+
    "\2\0\1\4\1\5\2\3\1\0\1\6\1\0\1\3"+
    "\2\7\10\10\1\0\1\11\1\12\1\13\1\14\2\0"+
    "\25\15\1\16\4\15\4\0\1\17\1\0\1\20\1\15"+
    "\1\21\1\22\1\23\1\24\1\15\1\25\1\26\1\15"+
    "\1\27\1\30\1\15\1\31\1\32\1\33\1\15\1\34"+
    "\1\35\1\36\1\37\1\15\1\40\3\15\1\41\1\42"+
    "\1\43\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\5\1\56\0\1\2\40\0\1\2\14\0\1\3"+
    "\12\0\1\4\26\0\1\5\3\0\1\6\12\0\1\4"+
    "\31\0\1\7\53\0\1\10\121\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c"+
    "\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u02f4\0\u0750\0\u0774\0\u0798"+
    "\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8"+
    "\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8"+
    "\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8"+
    "\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\44\0\u0bd0\0\u0bf4"+
    "\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14"+
    "\0\u0d38\0\u0d5c\0\44\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10"+
    "\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0990\0\u0ee8\0\u0f0c"+
    "\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4\0\u1008\0\u102c"+
    "\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u11b8\0\u11dc\0\44\0\u1200\0\u1224\0\u1248"+
    "\0\44\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344"+
    "\0\u1368\0\u138c\0\u13b0\0\44\0\u13d4\0\u13f8\0\u141c\0\u1440"+
    "\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560"+
    "\0\u1584\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680"+
    "\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734\0\44\0\u1758\0\u177c"+
    "\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c"+
    "\0\u18c0\0\u18e4\0\u1908\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc"+
    "\0\u19e0\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc"+
    "\0\u1b00\0\u1b24\0\u1b48\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8\0\u1bfc"+
    "\0\u1c20\0\u1c44\0\u1c68\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8\0\u1d1c"+
    "\0\u1d40\0\44\0\u1d64\0\u1d88\0\u1dac\0\u1dd0\0\u1df4\0\u1e18"+
    "\0\u1e3c\0\u1e60\0\u1e84\0\u1ea8\0\u1ecc\0\u1ef0\0\u1f14\0\u1f38"+
    "\0\u1f5c\0\u1f80\0\u1fa4\0\u1fc8\0\u1fec\0\u2010\0\u2034\0\u2058"+
    "\0\u207c\0\u20a0\0\u20c4\0\u20e8\0\u210c\0\u2130\0\u2154\0\u2178"+
    "\0\u219c\0\u21c0\0\u21e4\0\u2208\0\u222c\0\u2250\0\u2274\0\u2298"+
    "\0\u22bc\0\u22e0\0\u2304\0\u2328\0\u234c\0\u2370\0\u2394\0\u23b8"+
    "\0\u23dc\0\u2400\0\u2424\0\u2448\0\u246c\0\u2490\0\u24b4\0\u24d8"+
    "\0\u24fc\0\u2520\0\u2544\0\u2568\0\u258c\0\u25b0\0\u25d4\0\u25f8"+
    "\0\u261c\0\u2640\0\u2664\0\u2688\0\u26ac\0\u26d0\0\u26f4\0\u2718"+
    "\0\u273c\0\u2760\0\u2784\0\u27a8\0\u27cc\0\u27f0\0\u2814\0\u2838"+
    "\0\u285c\0\u2880\0\u28a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\22\2\1\3\3\2\1\4\1\2\1\5\7\2\1\6"+
    "\3\2\67\0\1\7\44\0\1\10\51\0\1\11\36\0"+
    "\1\12\42\0\1\13\23\0\1\14\71\0\1\15\37\0"+
    "\1\16\16\0\2\17\42\0\2\14\12\0\2\20\1\0"+
    "\21\20\36\0\1\21\40\0\1\22\14\0\2\17\13\0"+
    "\1\23\5\0\1\24\1\0\1\25\15\0\1\26\1\27"+
    "\1\30\1\31\1\26\1\32\3\33\1\26\1\34\1\35"+
    "\1\34\2\20\1\33\21\20\3\26\41\0\1\36\25\0"+
    "\1\37\43\0\1\40\40\0\1\41\54\0\1\42\12\0"+
    "\13\26\1\43\31\26\2\27\2\26\1\32\4\26\1\34"+
    "\1\35\1\34\30\26\2\27\2\26\1\32\4\26\1\34"+
    "\1\35\1\34\2\44\1\26\21\44\16\26\1\43\1\26"+
    "\2\44\1\26\21\44\16\26\1\43\25\26\1\45\3\26"+
    "\1\27\1\30\1\31\1\26\1\32\3\33\1\26\1\34"+
    "\1\35\1\34\2\26\1\33\25\26\2\34\10\26\1\43"+
    "\1\26\2\46\1\26\21\46\3\26\1\0\2\43\10\0"+
    "\1\47\1\0\2\50\1\0\21\50\4\0\2\51\12\0"+
    "\2\52\1\0\21\52\7\0\1\53\60\0\1\54\51\0"+
    "\1\55\52\0\1\56\6\0\2\43\12\0\2\50\1\0"+
    "\21\50\3\0\6\26\3\57\1\26\1\60\1\61\1\60"+
    "\2\44\1\57\21\44\4\26\2\45\4\26\2\62\2\26"+
    "\1\43\1\26\2\63\1\26\2\63\1\64\16\63\2\26"+
    "\1\65\1\26\2\66\2\26\1\32\3\67\2\26\1\43"+
    "\1\26\2\46\1\67\21\46\3\26\13\0\1\43\31\0"+
    "\2\70\2\0\1\71\3\72\4\0\2\50\1\72\21\50"+
    "\4\0\2\51\12\0\2\52\1\0\21\52\2\0\1\73"+
    "\1\0\2\74\12\0\2\52\1\0\21\52\4\0\2\53"+
    "\12\0\2\75\1\0\21\75\41\0\1\76\30\0\1\77"+
    "\21\0\2\100\41\0\6\26\3\57\1\26\1\60\1\61"+
    "\1\60\2\26\1\57\37\26\1\43\1\26\2\46\1\26"+
    "\21\46\3\26\1\0\2\43\10\0\1\101\1\0\2\50"+
    "\1\0\21\50\3\0\1\26\2\102\4\26\2\62\2\26"+
    "\1\43\1\26\2\63\1\26\2\63\1\64\16\63\2\26"+
    "\1\65\1\26\2\102\3\26\3\63\2\26\1\43\1\26"+
    "\5\63\1\64\16\63\2\26\1\65\1\26\2\102\3\26"+
    "\3\63\2\26\1\43\1\26\5\63\1\64\1\103\15\63"+
    "\2\26\1\65\1\26\2\66\2\26\1\32\5\26\1\43"+
    "\31\26\2\66\2\26\1\32\3\67\2\26\1\43\3\26"+
    "\1\67\24\26\1\0\2\70\2\0\1\71\77\0\1\104"+
    "\3\0\2\70\2\0\1\71\3\72\6\0\1\72\47\0"+
    "\1\105\21\0\2\74\40\0\1\73\1\106\1\107\1\110"+
    "\1\111\1\106\1\112\3\113\1\106\1\114\1\115\1\114"+
    "\2\75\1\113\21\75\3\106\32\0\1\116\45\0\1\117"+
    "\10\0\2\100\12\0\2\120\1\0\21\120\16\0\1\121"+
    "\30\0\1\26\2\102\10\26\1\43\27\26\1\65\1\26"+
    "\2\102\3\26\3\63\2\26\1\43\1\26\5\63\1\64"+
    "\1\63\1\122\14\63\2\26\1\65\1\0\2\104\4\0"+
    "\2\123\4\0\2\124\1\0\2\124\1\125\16\124\2\0"+
    "\1\126\20\0\1\127\23\0\13\106\1\130\31\106\2\107"+
    "\2\106\1\112\4\106\1\114\1\115\1\114\30\106\2\107"+
    "\2\106\1\112\4\106\1\114\1\115\1\114\2\131\1\106"+
    "\21\131\16\106\1\130\1\106\2\131\1\106\21\131\16\106"+
    "\1\130\25\106\1\132\3\106\1\107\1\110\1\111\1\106"+
    "\1\112\3\113\1\106\1\114\1\115\1\114\2\106\1\113"+
    "\25\106\2\114\10\106\1\130\1\106\2\133\1\106\21\133"+
    "\3\106\1\0\2\130\10\0\1\134\1\0\2\135\1\0"+
    "\21\135\37\0\1\136\10\0\2\137\42\0\2\140\3\0"+
    "\1\141\2\142\1\143\3\0\2\120\1\142\21\120\20\0"+
    "\2\50\1\0\21\50\3\0\1\26\2\144\3\26\3\63"+
    "\2\26\1\43\1\26\5\63\1\64\16\63\2\26\1\65"+
    "\1\0\2\145\4\0\2\123\4\0\2\124\1\0\2\124"+
    "\1\125\16\124\2\0\1\126\1\0\2\145\3\0\3\124"+
    "\4\0\5\124\1\125\16\124\2\0\1\126\1\0\2\145"+
    "\3\0\3\124\4\0\5\124\1\125\1\146\15\124\2\0"+
    "\1\126\21\0\1\147\23\0\2\130\12\0\2\135\1\0"+
    "\21\135\3\0\6\106\3\150\1\106\1\151\1\152\1\151"+
    "\2\131\1\150\21\131\4\106\2\132\4\106\2\153\2\106"+
    "\1\130\1\106\2\154\1\106\2\154\1\155\16\154\2\106"+
    "\1\156\1\106\2\157\2\106\1\112\3\160\2\106\1\130"+
    "\1\106\2\133\1\160\21\133\3\106\13\0\1\130\31\0"+
    "\2\161\2\0\1\162\3\163\4\0\2\135\1\163\21\135"+
    "\4\0\2\164\12\0\2\165\1\0\21\165\4\0\2\137"+
    "\12\0\2\166\1\0\21\166\4\0\2\140\3\0\1\167"+
    "\2\0\1\143\33\0\2\140\3\0\1\141\2\142\1\143"+
    "\2\0\1\170\2\0\1\142\25\0\2\140\3\0\1\141"+
    "\2\142\1\143\5\0\1\142\24\0\1\26\2\144\10\26"+
    "\1\43\10\26\1\171\1\26\1\172\14\26\1\65\1\0"+
    "\2\145\40\0\1\126\1\0\2\145\3\0\3\124\4\0"+
    "\5\124\1\125\1\124\1\173\14\124\2\0\1\126\25\0"+
    "\1\174\16\0\6\106\3\150\1\106\1\151\1\152\1\151"+
    "\2\106\1\150\37\106\1\130\1\106\2\133\1\106\21\133"+
    "\3\106\1\0\2\130\10\0\1\175\1\0\2\135\1\0"+
    "\21\135\3\0\1\106\2\176\4\106\2\153\2\106\1\130"+
    "\1\106\2\154\1\106\2\154\1\155\16\154\2\106\1\156"+
    "\1\106\2\176\3\106\3\154\2\106\1\130\1\106\5\154"+
    "\1\155\16\154\2\106\1\156\1\106\2\176\3\106\3\154"+
    "\2\106\1\130\1\106\5\154\1\155\1\177\15\154\2\106"+
    "\1\156\1\106\2\157\2\106\1\112\5\106\1\130\31\106"+
    "\2\157\2\106\1\112\3\160\2\106\1\130\3\106\1\160"+
    "\24\106\1\0\2\161\2\0\1\162\77\0\1\200\3\0"+
    "\2\161\2\0\1\162\3\163\6\0\1\163\25\0\2\164"+
    "\12\0\2\165\1\0\21\165\1\0\1\201\2\0\2\202"+
    "\3\0\1\203\2\204\1\205\3\0\2\165\1\204\21\165"+
    "\4\0\2\206\3\0\1\207\2\210\1\211\3\0\2\166"+
    "\1\210\21\166\17\0\1\170\30\0\2\170\4\0\2\212"+
    "\33\0\13\26\1\43\4\26\1\213\36\26\1\43\15\26"+
    "\1\214\12\26\1\0\2\215\3\0\3\124\4\0\5\124"+
    "\1\125\16\124\2\0\1\126\4\0\1\216\52\0\1\217"+
    "\30\0\1\106\2\176\10\106\1\130\27\106\1\156\1\106"+
    "\2\176\3\106\3\154\2\106\1\130\1\106\5\154\1\155"+
    "\1\154\1\220\14\154\2\106\1\156\1\0\2\200\4\0"+
    "\2\221\4\0\2\222\1\0\2\222\1\223\16\222\2\0"+
    "\1\224\21\0\1\225\4\0\1\226\16\0\2\202\3\0"+
    "\1\227\2\0\1\205\33\0\2\202\3\0\1\203\2\204"+
    "\1\205\2\0\1\230\2\0\1\204\25\0\2\202\3\0"+
    "\1\203\2\204\1\205\5\0\1\204\25\0\2\206\3\0"+
    "\1\231\2\0\1\211\33\0\2\206\3\0\1\207\2\210"+
    "\1\211\2\0\1\232\2\0\1\210\25\0\2\206\3\0"+
    "\1\207\2\210\1\211\5\0\1\210\25\0\2\233\4\0"+
    "\2\212\1\143\32\0\13\26\1\43\13\26\1\234\27\26"+
    "\1\43\22\26\1\235\5\26\1\0\2\215\21\0\1\236"+
    "\1\0\1\237\14\0\1\126\7\0\2\240\50\0\2\135"+
    "\1\0\21\135\3\0\1\106\2\241\3\106\3\154\2\106"+
    "\1\130\1\106\5\154\1\155\16\154\2\106\1\156\1\0"+
    "\2\242\4\0\2\221\4\0\2\222\1\0\2\222\1\223"+
    "\16\222\2\0\1\224\1\0\2\242\3\0\3\222\4\0"+
    "\5\222\1\223\16\222\2\0\1\224\1\0\2\242\3\0"+
    "\3\222\4\0\5\222\1\223\1\243\15\222\2\0\1\224"+
    "\25\0\1\244\47\0\1\245\26\0\1\230\30\0\2\230"+
    "\36\0\1\246\16\0\1\232\30\0\2\232\4\0\1\247"+
    "\14\0\1\250\11\0\1\251\6\0\2\233\6\0\1\143"+
    "\32\0\13\26\1\43\7\26\1\252\21\26\2\253\10\26"+
    "\1\43\30\26\20\0\1\254\54\0\1\255\17\0\1\256"+
    "\36\0\1\106\2\241\10\106\1\130\10\106\1\257\1\106"+
    "\1\260\14\106\1\156\1\0\2\242\40\0\1\224\1\0"+
    "\2\242\3\0\3\222\4\0\5\222\1\223\1\222\1\261"+
    "\14\222\2\0\1\224\20\0\1\262\61\0\1\263\46\0"+
    "\1\264\1\0\1\205\1\0\2\247\6\0\1\211\52\0"+
    "\1\265\57\0\1\266\7\0\13\26\1\43\20\26\1\267"+
    "\10\26\2\253\10\26\1\43\1\26\2\270\1\26\21\270"+
    "\3\26\27\0\1\271\52\0\1\272\5\0\13\106\1\130"+
    "\4\106\1\273\36\106\1\130\15\106\1\274\12\106\1\0"+
    "\2\275\3\0\3\222\4\0\5\222\1\223\16\222\2\0"+
    "\1\224\34\0\1\263\51\0\1\276\10\0\2\277\4\0"+
    "\2\300\1\0\21\300\33\0\1\301\52\0\1\302\4\0"+
    "\1\26\2\303\10\26\1\43\31\26\2\304\3\26\1\305"+
    "\2\306\1\62\1\26\1\43\1\26\2\270\1\306\21\270"+
    "\3\26\23\0\1\307\21\0\2\310\41\0\13\106\1\130"+
    "\13\106\1\311\27\106\1\130\22\106\1\312\5\106\1\0"+
    "\2\275\21\0\1\313\1\0\1\314\14\0\1\224\1\0"+
    "\2\276\12\0\2\315\1\0\21\315\46\0\1\246\6\0"+
    "\3\316\4\0\2\300\1\316\21\300\2\0\1\246\35\0"+
    "\1\302\31\0\1\247\20\0\1\26\2\303\10\26\1\43"+
    "\1\26\2\317\1\26\21\317\4\26\2\304\3\26\1\320"+
    "\2\26\1\62\1\26\1\43\31\26\2\304\3\26\1\305"+
    "\2\306\1\62\1\26\1\43\1\321\2\26\1\306\25\26"+
    "\2\304\3\26\1\305\2\306\1\62\1\26\1\43\3\26"+
    "\1\306\24\26\34\0\1\322\10\0\2\310\12\0\2\323"+
    "\1\0\21\323\3\0\13\106\1\130\7\106\1\324\21\106"+
    "\2\325\10\106\1\130\30\106\20\0\1\326\54\0\1\327"+
    "\13\0\2\330\3\0\3\331\1\332\3\0\2\315\1\331"+
    "\21\315\11\0\3\316\6\0\1\316\23\0\1\246\1\26"+
    "\2\333\3\26\1\334\2\335\1\62\1\26\1\43\1\26"+
    "\2\317\1\335\21\317\16\26\1\43\1\321\30\26\2\321"+
    "\4\26\2\336\2\26\1\43\30\26\1\0\2\337\42\0"+
    "\2\340\3\0\1\341\2\342\1\123\3\0\2\323\1\342"+
    "\21\323\3\0\13\106\1\130\20\106\1\343\10\106\2\325"+
    "\10\106\1\130\1\106\2\344\1\106\21\344\3\106\27\0"+
    "\1\345\52\0\1\346\6\0\2\330\6\0\1\332\33\0"+
    "\2\330\3\0\3\331\1\332\5\0\1\331\24\0\1\26"+
    "\2\333\3\26\1\347\2\26\1\62\1\26\1\43\31\26"+
    "\2\333\3\26\1\334\2\335\1\62\1\26\1\43\1\350"+
    "\2\26\1\335\25\26\2\333\3\26\1\334\2\335\1\62"+
    "\1\26\1\43\3\26\1\335\25\26\2\351\4\26\2\336"+
    "\1\62\1\26\1\43\30\26\1\0\2\337\12\0\2\352"+
    "\1\0\21\352\4\0\2\340\3\0\1\353\2\0\1\123"+
    "\33\0\2\340\3\0\1\341\2\342\1\123\2\0\1\354"+
    "\2\0\1\342\25\0\2\340\3\0\1\341\2\342\1\123"+
    "\5\0\1\342\24\0\1\106\2\355\10\106\1\130\31\106"+
    "\2\356\3\106\1\357\2\360\1\153\1\106\1\130\1\106"+
    "\2\344\1\360\21\344\3\106\23\0\1\361\21\0\2\362"+
    "\41\0\13\26\1\43\1\350\30\26\2\350\4\26\1\351"+
    "\3\26\1\43\10\26\1\363\11\26\1\364\6\26\2\351"+
    "\6\26\1\62\1\26\1\43\30\26\1\0\2\365\3\0"+
    "\1\366\2\367\1\123\3\0\2\352\1\367\21\352\17\0"+
    "\1\354\30\0\2\354\4\0\2\370\33\0\1\106\2\355"+
    "\10\106\1\130\1\106\2\371\1\106\21\371\4\106\2\356"+
    "\3\106\1\372\2\106\1\153\1\106\1\130\31\106\2\356"+
    "\3\106\1\357\2\360\1\153\1\106\1\130\1\373\2\106"+
    "\1\360\25\106\2\356\3\106\1\357\2\360\1\153\1\106"+
    "\1\130\3\106\1\360\24\106\34\0\1\374\10\0\2\362"+
    "\12\0\2\375\1\0\21\375\3\0\13\26\1\43\4\26"+
    "\1\376\36\26\1\43\20\26\1\377\7\26\1\0\2\365"+
    "\3\0\1\u0100\2\0\1\123\33\0\2\365\3\0\1\366"+
    "\2\367\1\123\2\0\1\u0101\2\0\1\367\25\0\2\365"+
    "\3\0\1\366\2\367\1\123\5\0\1\367\25\0\2\u0102"+
    "\4\0\2\370\1\123\32\0\1\106\2\u0103\3\106\1\u0104"+
    "\2\u0105\1\153\1\106\1\130\1\106\2\371\1\u0105\21\371"+
    "\16\106\1\130\1\373\30\106\2\373\4\106\2\u0106\2\106"+
    "\1\130\30\106\1\0\2\u0107\42\0\2\u0108\3\0\1\u0109"+
    "\2\u010a\1\221\3\0\2\375\1\u010a\21\375\3\0\13\26"+
    "\1\43\14\26\1\u010b\26\26\1\43\23\26\1\u010c\4\26"+
    "\14\0\1\u0101\30\0\2\u0101\4\0\1\u0102\14\0\1\u010d"+
    "\11\0\1\u010e\6\0\2\u0102\6\0\1\123\32\0\1\106"+
    "\2\u0103\3\106\1\u010f\2\106\1\153\1\106\1\130\31\106"+
    "\2\u0103\3\106\1\u0104\2\u0105\1\153\1\106\1\130\1\u0110"+
    "\2\106\1\u0105\25\106\2\u0103\3\106\1\u0104\2\u0105\1\153"+
    "\1\106\1\130\3\106\1\u0105\25\106\2\u0111\4\106\2\u0106"+
    "\1\153\1\106\1\130\30\106\1\0\2\u0107\12\0\2\u0112"+
    "\1\0\21\u0112\4\0\2\u0108\3\0\1\u0113\2\0\1\221"+
    "\33\0\2\u0108\3\0\1\u0109\2\u010a\1\221\2\0\1\u0114"+
    "\2\0\1\u010a\25\0\2\u0108\3\0\1\u0109\2\u010a\1\221"+
    "\5\0\1\u010a\24\0\13\26\1\43\21\26\1\u010c\21\26"+
    "\1\43\7\26\1\351\20\26\20\0\1\u0115\57\0\1\u0116"+
    "\7\0\13\106\1\130\1\u0110\30\106\2\u0110\4\106\1\u0111"+
    "\3\106\1\130\10\106\1\u0117\11\106\1\u0118\6\106\2\u0111"+
    "\6\106\1\153\1\106\1\130\30\106\1\0\2\u0119\3\0"+
    "\1\u011a\2\u011b\1\221\3\0\2\u0112\1\u011b\21\u0112\17\0"+
    "\1\u0114\30\0\2\u0114\4\0\2\u011c\63\0\1\u011d\52\0"+
    "\1\u011e\4\0\13\106\1\130\4\106\1\u011f\36\106\1\130"+
    "\20\106\1\u0120\7\106\1\0\2\u0119\3\0\1\u0121\2\0"+
    "\1\221\33\0\2\u0119\3\0\1\u011a\2\u011b\1\221\2\0"+
    "\1\u0122\2\0\1\u011b\25\0\2\u0119\3\0\1\u011a\2\u011b"+
    "\1\221\5\0\1\u011b\25\0\2\u0123\4\0\2\u011c\1\221"+
    "\67\0\1\u011e\31\0\1\u0102\20\0\13\106\1\130\14\106"+
    "\1\u0124\26\106\1\130\23\106\1\u0125\4\106\14\0\1\u0122"+
    "\30\0\2\u0122\4\0\1\u0123\14\0\1\u0126\11\0\1\u0127"+
    "\6\0\2\u0123\6\0\1\221\32\0\13\106\1\130\21\106"+
    "\1\u0125\21\106\1\130\7\106\1\u0111\20\106\20\0\1\u0128"+
    "\57\0\1\u0129\37\0\1\u012a\52\0\1\u012b\41\0\1\u012b"+
    "\31\0\1\u0123\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\56\0\1\1\40\0\1\11\14\0"+
    "\1\11\12\0\1\1\26\0\1\11\3\0\1\11\12\0"+
    "\1\11\31\0\1\11\53\0\1\11\121\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 9: break;
          case 2:
            { System.out.println("IF con OPREL");
            }
            // fall through
          case 10: break;
          case 3:
            { System.out.println("Encontro una declaracion Int");
            }
            // fall through
          case 11: break;
          case 4:
            { System.out.println("Encontro un while");
            }
            // fall through
          case 12: break;
          case 5:
            { System.out.println("Encontro un vector sin tipado");
            }
            // fall through
          case 13: break;
          case 6:
            { System.out.println("Encontro una declaracion Char");
            }
            // fall through
          case 14: break;
          case 7:
            { System.out.println("Loop encontrado");
            }
            // fall through
          case 15: break;
          case 8:
            { System.out.println("Encontro un vector de una dimension");
            }
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
